/*	OCLexTest.m
 *
 *		This file was automatically generated by OCLex, part of the OCTools
 *	suite available at:
 *
 *		https://github.com/w3woody/OCTools
 */

#import "OCLexTest.h"


#import "Simple.h"


/************************************************************************/
/*                                                                      */
/*  Lex Transition State Tables                                         */
/*                                                                      */
/************************************************************************/

/*
 *  Constants
 */

#define MAXSTATES       262
#define MAXCHARCLASS    62
#define MAXACTIONS      91


//  Character classes used during parsing:
//
//  0: a
//  1: b
//  2: c
//  3: d
//  4: e
//  5: f
//  6: g
//  7: h
//  8: i
//  9: k
//  10: l
//  11: m
//  12: n
//  13: o
//  14: p
//  15: r
//  16: s
//  17: t
//  18: u
//  19: v
//  20: w
//  21: x
//  22: y
//  23: z
//  24: {
//  25: |
//  26: }
//  27: ~
//  28: E
//  29: F
//  30: L
//  31: U
//  32: X
//  33: \[
//  34: \
//  35: \]
//  36: \^
//  37: [G-KM-TVWYZ_jq]
//  38: !
//  39: "
//  40: %
//  41: &
//  42: '
//  43: (
//  44: )
//  45: *
//  46: +
//  47: ,
//  48: \-
//  49: .
//  50: /
//  51: 0
//  52: [1-9]
//  53: :
//  54: ;
//  55: <
//  56: =
//  57: >
//  58: ?
//  59: [\011-\014 ]
//  60: [\000-\010\015-\037#$@`-\377]
//  61: [A-D]

/*  CharClass
 *
 *      Maps 8-bit character to character class
 */

static uint16_t CharClass[256] = {
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  59,  59,  59,  59,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     59,  38,  39,  60,  60,  40,  41,  42, 
     43,  44,  45,  46,  47,  48,  49,  50, 
     51,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  54,  55,  56,  57,  58, 
     60,  61,  61,  61,  61,  28,  29,  37, 
     37,  37,  37,  37,  30,  37,  37,  37, 
     37,  37,  37,  37,  37,  31,  37,  37, 
     32,  37,  37,  33,  34,  35,  36,  37, 
     60,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,  37,   9,  10,  11,  12,  13, 
     14,  37,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  24,  25,  26,  27,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60
};

/*  StateActions
 *
 *      Maps states to actions. MAXACTION if this is not a terminal
 */

static uint16_t StateActions[262] = {
     91,  82,  34,  34,  34,  34,  34,  34, 
     34,  34,  34,  34,  34,  34,  34,  34, 
     34,  34,  37,  37,  34,  90,  75,  90, 
     85,  84,  80,  79,  81,  83,  76,  86, 
     87,  70,  77,  65,  66,  67,  68,  69, 
     71,  72,  73,  74,  78,  88,  89,  90, 
      0,   1,  49,  34,  34,  34,  34,  34, 
     34,  34,  34,   9,  34,  34,  34,  34, 
     34,  34,  17,  34,  34,  34,  34,  34, 
     34,  34,  34,  34,  34,  34,  91,  36, 
     37,  37,  37,  37,  91,  41,  37,  91, 
     91,  91,  91,  40,  91,  91,  91,  42, 
     54,  62,  55,  61,  66,  73,  46,  56, 
     47,  57,  58,  48,  50,  67,  51,  59, 
     52,  53,  60,  63,  64,  74,  34,  34, 
     34,  34,  34,  34,  34,  34,  34,  34, 
     34,  15,  34,  18,  34,  34,  34,  34, 
     34,  34,  34,  34,  34,  34,  34,  34, 
     34,  34,  34,  35,  36,  36,  36,  36, 
     91,  39,  40,  91,  41,  41,  41,  41, 
     91,  38,  91,  40,  40,  40,  40,  43, 
     91,  44,  45,   2,  34,   4,   5,  34, 
     34,  34,  34,  11,  12,  34,  34,  16, 
     19,  34,  34,  34,  34,  34,  34,  34, 
     34,  34,  34,  34,  31,  34,  34,  35, 
     35,  35,  35,  39,  39,  39,  39,  91, 
     40,  40,  40,  40,  91,  41,  91,  40, 
      3,   6,  34,  34,  34,  34,  14,  34, 
     34,  22,  34,  34,  34,  34,  34,  34, 
     29,  34,  34,  33,  91,  40,  34,  34, 
     10,  13,  34,  21,  23,  24,  25,  26, 
     27,  34,  34,  34,  34,   8,  34,  28, 
     34,  34,   7,  20,  30,  32
};

/*  StateEndFlag
 *
 *      True if this state ends with '$', that is, can only work at
 *  the end of line.
 */

static uint8_t StateEndFlag[91] = {
      0,   1,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0
};

/*  StateMachineIA, StateMachineJA, StateMachineA
 *
 *      Lex state machine in compressed sparce row storage format. We do this
 *  in order to compact the resulting sparse matrix state machine so we don't
 *  consume as much space. Decoding the new state becomes an O(log(N)) process
 *  on the input character class as we use a binary search on the JA array.
 *
 *      See the article below for more information:
 *
 *      https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29
 */

static uint16_t StateMachineIA[263] = {
      0,  62,  65,  98, 131, 164, 197, 230, 
    263, 296, 329, 362, 395, 428, 461, 494, 
    527, 560, 593, 604, 613, 648, 709, 712, 
    774, 776, 780, 782, 785, 786, 788, 790, 
    791, 793, 794, 795, 795, 795, 795, 795, 
    796, 796, 796, 796, 796, 796, 796, 796, 
    796, 796, 858, 858, 891, 924, 957, 990, 
    1023, 1056, 1089, 1122, 1155, 1188, 1221, 1254, 
    1287, 1320, 1353, 1386, 1419, 1452, 1485, 1518, 
    1551, 1584, 1617, 1650, 1683, 1716, 1749, 1760, 
    1769, 1773, 1777, 1781, 1785, 1789, 1797, 1806, 
    1867, 1929, 1991, 2053, 2061, 2062, 2124, 2186, 
    2186, 2187, 2187, 2188, 2188, 2188, 2188, 2188, 
    2188, 2188, 2188, 2188, 2188, 2188, 2188, 2188, 
    2188, 2188, 2188, 2188, 2188, 2188, 2188, 2221, 
    2254, 2287, 2320, 2353, 2386, 2419, 2452, 2485, 
    2518, 2551, 2584, 2617, 2650, 2683, 2716, 2749, 
    2782, 2815, 2848, 2881, 2914, 2947, 2980, 3013, 
    3046, 3079, 3112, 3145, 3160, 3164, 3168, 3172, 
    3176, 3178, 3184, 3192, 3196, 3196, 3196, 3196, 
    3196, 3258, 3258, 3262, 3262, 3262, 3262, 3262, 
    3262, 3324, 3324, 3324, 3357, 3390, 3423, 3456, 
    3489, 3522, 3555, 3588, 3621, 3654, 3687, 3720, 
    3753, 3786, 3819, 3852, 3885, 3918, 3951, 3984, 
    4017, 4050, 4083, 4116, 4149, 4182, 4215, 4248, 
    4252, 4256, 4260, 4264, 4264, 4264, 4264, 4264, 
    4268, 4268, 4268, 4268, 4268, 4270, 4276, 4278, 
    4284, 4317, 4350, 4383, 4416, 4449, 4482, 4515, 
    4548, 4581, 4614, 4647, 4680, 4713, 4746, 4779, 
    4812, 4845, 4878, 4911, 4944, 4946, 4952, 4985, 
    5018, 5051, 5084, 5117, 5150, 5183, 5216, 5249, 
    5282, 5315, 5348, 5381, 5414, 5447, 5480, 5513, 
    5546, 5579, 5612, 5645, 5678, 5711, 5744
};

static uint16_t StateMachineJA[5744] = {
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,  49,  50,  51,  52,  53,  54,  55, 
     56,  57,  58,  59,  60,  61,  45,  50, 
     56,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   4,  10,  18,  21,  28,  30,  31, 
     32,  49,  51,  52,   4,  10,  18,  28, 
     30,  31,  49,  51,  52,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  39,  42,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  43,  44,  45,  46,  47,  48, 
     49,  50,  51,  52,  53,  54,  55,  56, 
     57,  58,  59,  60,  61,  49,  51,  52, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,  49,  50,  51,  52,  53,  54,  55, 
     56,  57,  58,  59,  60,  61,  56,  57, 
     40,  53,  55,  56,  46,  56,  48,  56, 
     57,  56,  56,  57,  41,  56,  56,  25, 
     56,  56,  56,  57,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  24,  25,  26,  27, 
     28,  29,  30,  31,  32,  33,  34,  35, 
     36,  37,  38,  39,  40,  41,  42,  43, 
     44,  45,  46,  47,  48,  49,  50,  51, 
     52,  53,  54,  55,  56,  57,  58,  59, 
     60,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,  28,  29,  51,  52,  61, 
      4,  10,  18,  28,  30,  31,  49,  51, 
     52,  10,  18,  30,  31,  10,  18,  30, 
     31,  10,  18,  30,  31,  10,  18,  30, 
     31,  46,  48,  51,  52,   4,   5,  10, 
     28,  29,  30,  51,  52,   4,  10,  18, 
     28,  30,  31,  49,  51,  52,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     43,  44,  45,  46,  47,  48,  49,  50, 
     51,  52,  53,  54,  55,  56,  57,  58, 
     59,  60,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  24,  25,  26,  27,  28, 
     29,  30,  31,  32,  33,  34,  35,  36, 
     37,  38,  39,  40,  41,  42,  43,  44, 
     45,  46,  47,  48,  49,  50,  51,  52, 
     53,  54,  55,  56,  57,  58,  59,  60, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  24,  25,  26,  27,  28,  29,  30, 
     31,  32,  33,  34,  35,  36,  37,  38, 
     39,  40,  41,  42,  43,  44,  45,  46, 
     47,  48,  49,  50,  51,  52,  53,  54, 
     55,  56,  57,  58,  59,  60,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  24, 
     25,  26,  27,  28,  29,  30,  31,  32, 
     33,  34,  35,  36,  37,  38,  39,  40, 
     41,  42,  43,  44,  45,  46,  47,  48, 
     49,  50,  51,  52,  53,  54,  55,  56, 
     57,  58,  59,  60,  61,   4,   5,  10, 
     28,  29,  30,  51,  52,  49,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  49, 
     50,  51,  52,  53,  54,  55,  56,  57, 
     58,  59,  60,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  24,  25,  26,  27, 
     28,  29,  30,  31,  32,  33,  34,  35, 
     36,  37,  38,  39,  40,  41,  42,  43, 
     44,  45,  46,  47,  48,  49,  50,  51, 
     52,  53,  54,  55,  56,  57,  58,  59, 
     60,  61,  56,  56,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,  10, 
     18,  28,  29,  30,  31,  51,  52,  61, 
     10,  18,  30,  31,  10,  18,  30,  31, 
     10,  18,  30,  31,  10,  18,  30,  31, 
     51,  52,   5,  10,  29,  30,  51,  52, 
      4,   5,  10,  28,  29,  30,  51,  52, 
     46,  48,  51,  52,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  24,  25,  26,  27, 
     28,  29,  30,  31,  32,  33,  34,  35, 
     36,  37,  38,  39,  40,  41,  42,  43, 
     44,  45,  46,  47,  48,  49,  50,  51, 
     52,  53,  54,  55,  56,  57,  58,  59, 
     60,  61,  46,  48,  51,  52,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  49, 
     50,  51,  52,  53,  54,  55,  56,  57, 
     58,  59,  60,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
     10,  18,  30,  31,  10,  18,  30,  31, 
     10,  18,  30,  31,  10,  18,  30,  31, 
     46,  48,  51,  52,  51,  52,   5,  10, 
     29,  30,  51,  52,  51,  52,   5,  10, 
     29,  30,  51,  52,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
     51,  52,   5,  10,  29,  30,  51,  52, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  51,  52, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  51, 
     52,  61,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     51,  52,  61,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  51,  52,  61,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  51,  52,  61,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  51,  52,  61,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  51,  52,  61,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  51,  52,  61
};

static uint16_t StateMachineA[5744] = {
      2,   3,   4,   5,   6,   7,   8,  17, 
      9,  17,  10,  17,  17,  17,  17,  11, 
     12,  13,  14,  15,  16,  17,  17,  17, 
     36,  32,  37,  44,  17,  17,  20,  17, 
     17,  42,  47,  43,  31,  17,  34,  23, 
     29,  30,  21,  40,  41,  28,  26,  38, 
     27,  22,   1,  18,  19,  39,  35,  25, 
     33,  24,  45,  46,  47,  17,  48,  49, 
     50,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  51,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  54,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  55,  52,  52,  52,  52, 
     52,  52,  56,  52,  52,  52,  52,  52, 
     57,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     58,  52,  52,  52,  52,  52,  52,  52, 
     52,  59,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  60, 
     52,  61,  52,  52,  52,  52,  52,  52, 
     52,  52,  62,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     63,  52,  52,  64,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  65,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  66,  52,  52, 
     52,  52,  52,  52,  67,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  68,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  69,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  70,  71,  52,  52,  52,  52, 
     52,  52,  52,  52,  72,  52,  52,  73, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  74,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  75,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  76,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  77,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  84,  82,  80,  78,  84,  83,  81, 
     78,  85,  79,  79,  84,  82,  80,  84, 
     83,  81,  85,  86,  86,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  88,  87,  53,  53,  52, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  89,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  92,  91,  91, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  93,  94,  94,  94,  94,  95, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  97,  96, 
    100, 101,  98,  99, 103, 102, 105, 104, 
    106, 107, 108, 109, 111, 110, 112, 114, 
    113, 115, 116, 117,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  49,  49,  49,  49,  49,  49, 
     49,  49,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 118,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52, 119,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 120,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52, 121, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 122,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52, 123,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 124,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 125,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 126,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 127,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 128,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 129,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 130,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 131,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 132, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52, 133,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 134,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 135,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52, 136,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 137,  52,  52, 
     52,  52,  52,  52,  53,  53,  52, 138, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 139,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
    140,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 141, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 142,  52,  52,  52,  52,  52, 
     52,  52, 143,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 144,  52, 145,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 146,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52, 147, 147, 147, 
    147, 147, 147, 147, 147, 147, 147, 147, 
     84, 150, 148,  84, 151, 149,  85,  79, 
     79,  82,  80,  83,  81,  82,  80,  83, 
     81,  82,  80,  83,  81,  82,  80,  83, 
     81, 152, 152, 153, 153, 155, 156, 158, 
    155, 157, 159, 154, 154,  84,  82,  80, 
     84,  83,  81,  85,  86,  86,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     89,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  93,  94,  94, 
     94,  94,  95,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160, 160, 
    160, 160, 160, 160, 160, 160, 160,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  89,  90,  90,  90,  90,  90,  90, 
     90, 161,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90, 162, 163, 165, 
    162, 164, 166,  91,  91, 167, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168, 168, 168, 168, 168, 
    168, 168, 168, 168,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  93,  94, 
     94,  94,  94,  95,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94, 169, 170,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 171,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52, 172,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52, 173,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 174,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
    175, 176,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52, 177,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52, 178,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52, 179, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 180, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52, 181,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52, 182,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 183,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
    184,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 185,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 186,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 187,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 188,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52, 189,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 190,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 191,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 192,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52, 193, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 194,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 195,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52, 196,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52, 197, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 198,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52, 147, 147, 147, 147, 147, 147, 201, 
    199, 147, 147, 202, 200, 147, 147, 147, 
    150, 148, 151, 149, 150, 148, 151, 149, 
    150, 148, 151, 149, 150, 148, 151, 149, 
    153, 153, 203, 205, 204, 206, 153, 153, 
    207, 208, 210, 207, 209, 211, 154, 154, 
    212, 212, 213, 213,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  89,  90, 
     90,  90,  90,  90,  90,  90, 161,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90,  90,  90,  90,  90,  90,  90, 
     90,  90, 214, 214, 215, 215,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     93,  94,  94,  94,  94,  95,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  94,  94,  94,  94, 
     94,  94,  94,  94,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 216,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 217,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 218,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 219,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 220,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 221,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
    222,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 223,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 224,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 225,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52, 226,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52, 227,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 228, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52, 229,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52, 230,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52, 231,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 232, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52, 233,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 234, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52, 235,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
    201, 199, 202, 200, 201, 199, 202, 200, 
    201, 199, 202, 200, 201, 199, 202, 200, 
    236, 236, 237, 237, 213, 213, 156, 158, 
    157, 159, 213, 213, 215, 215, 163, 165, 
    164, 166, 215, 215,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 238,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 239,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52, 240,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52, 241,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52, 242,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
    243,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52, 244,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52, 245,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52, 246,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 247,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52, 248,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52, 249, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52, 250,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52, 251,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
    237, 237, 208, 210, 209, 211, 237, 237, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 252,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52, 253,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
    254,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52,  52, 
    255,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
    256,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 257, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52, 258,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52, 259, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  53,  53, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  53, 
     53,  52,  52,  52,  52, 260,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     53,  53,  52,  52,  52,  52,  52, 261, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  53,  53,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  53,  53,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  53,  53,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  53,  53,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  52,  52,  52, 
     52,  52,  52,  52,  52,  53,  53,  52
};

/*
 *	Internal storage
 */

@interface OCLexTest ()
{
	// Read position support
	NSInteger curLine;
	NSInteger curColumn;

	// Mark location support
	NSInteger markLine;
	NSInteger markColumn;

	// Mark buffer storage
	BOOL isMarked;							// yes if we have mark set
	unsigned char *markBuffer;				// mark buffer
	NSInteger markSize;						// bytes stored in buffer
	NSInteger markAlloc;					// capacity of buffer

	// Read cache
	unsigned char *readBuffer;				// read cache buffer
	NSInteger readPos;						// Read position
	NSInteger readSize;						// size of data in read buffer
	NSInteger readAlloc;					// Capacity of read cache

	// Text read buffer
	unsigned char *textBuffer;				// text cache for reading buffer
	NSInteger textMarkSize;
	NSInteger textSize;
	NSInteger textAlloc;
}

@property (strong) id<OCFileInput> file;

@end

/*
 *	Class lexer
 */

@implementation OCLexTest

/*
 *	Instantiate parser.
 */

- (instancetype)initWithStream:(id<OCFileInput>)file
{
	if (nil != (self = [super init])) {
		self.file = file;

		isMarked = NO;
		markSize = 0;
		markAlloc = 256;
		markBuffer = (unsigned char *)malloc(markAlloc);

		readPos = 0;
		readSize = 0;
		readAlloc = 256;
		readBuffer = (unsigned char *)malloc(readAlloc);

		textMarkSize = 0;
		textSize = 0;
		textAlloc = 256;
		textBuffer = (unsigned char *)malloc(textAlloc);

	}
	return self;
}

/*
 *	Free internal storage
 */

- (void)dealloc
{
	if (markBuffer) free(markBuffer);
	if (readBuffer) free(readBuffer);
	if (textBuffer) free(textBuffer);
}

/*
 *	Internal read backtrack support. We implement the internal methods
 *	for mark, unmark and reset to note the current file position. This is
 *	used by the lexer to unwind the read queue if we overread the number
 *	of characters during parsing
 *
 *	In essence, as we execute the DFA while we read characters, when we
 *	find an end state, we mark the stream. Then we continue to read until
 *	we reach an error--at which point we rewind back to the mark location.
 */

/*
 *	mark: note that we should cache characters being read so we can rewind
 *	to this location in the future
 */

- (void)mark
{
	/*
	 *	Store the current file location and enable marking. This has the side
	 *	effect of flushing any previous mark buffer
	 */

	markLine = curLine;
	markColumn = curColumn;
	textMarkSize = textSize;

	isMarked = YES;
	markSize = 0;
}

/*
 *	Reset: reset the buffer positions
 */

- (void)reset
{
	if (!isMarked) return;	// not marked, nothing to do.

	/*
	 *	Reset to the marked position. We maintain two mutable data objects,
	 *	one which stores the data we're reading from (if any), and one which
	 *	stores the marked data.
	 *
	 *	Reset does two things: it prepends the read buffer with the data we
	 *	stored during the mark phase, and we clear the mark flag.
	 */

	if (markSize + readSize - readPos > readAlloc) {
		/*
		 *	Resize to fit
		 */

		NSInteger toFit = markSize + readSize - readPos;
		toFit = (toFit + 255) & ~255;	// align to 256 byte boundary
		if (toFit < 0) toFit = 256;

		unsigned char *ptr = (unsigned char *)realloc(readBuffer, toFit);
		if (ptr == NULL) {
			[NSException raise:NSMallocException format:@"Out of memory"];
		}

		readBuffer = ptr;
		readAlloc = toFit;
	}

	/*
	 *	Move the contents of the read buffer to a location above where the
	 *	mark queue will go
	 */

	if (readPos < readSize) {
		memmove(markSize + readBuffer, readPos + readBuffer, readSize - readPos);
	}

	/*
	 *	Move the marked data
	 */

	if (markSize > 0) {
		memmove(readBuffer, markBuffer, markSize);
	}

	/*
	 *	Update the read buffer settings
	 */

	readSize = markSize + readSize - readPos;
	readPos = 0;

	/*
	 *	Clear the mark
	 */

	isMarked = NO;
	markSize = 0;

	/*
	 *	Update the file position
	 */

	curLine = markLine;
	curColumn = markColumn;
	textSize = textMarkSize;
}

/*
 *	Read input stream.
 */

- (int)input
{
	int ch;

	/*
	 *	Low level: read, if from marked buffer
	 */

	if (readPos < readSize) {
		ch = readBuffer[readPos++];
	} else {
		ch = [self.file readByte];

		if (ch == -1) return -1;		// At EOF; immediate return.
	}

	/*
	 *	Update file position
	 */

	if (ch == '\n') {
		curColumn = 0;
		++curLine;
	} else {
		++curColumn;
	}

	/*
	 *	Handle mark
	 */

	if (isMarked) {
		if (markSize >= markAlloc) {
			NSInteger toFit = (markAlloc + 256) & ~255;
			if (toFit < 256) toFit = 256;
			unsigned char *ptr = (unsigned char *)realloc(markBuffer, toFit);
			if (ptr == NULL) {
				[NSException raise:NSMallocException format:@"Out of memory"];
			}

			markBuffer = ptr;
			markAlloc = toFit;
		}
		markBuffer[markSize++] = (unsigned char)ch;
	}

	/*
	 *	Return read character.
	 */

	return ch;
}

/*
 *	Read ahead to determine if we're at the EOL
 */

- (BOOL)atEOL
{
	int ch;

	if (readPos < readSize) {
		ch = readBuffer[readPos];
	} else {
		ch = [self.file peekByte];
	}
	
	if ((ch == -1) || (ch == '\n')) return YES;
	return NO;
}

/*
 *	Read the state for the class/state combination. Decodes the sparce 
 *	matrix that is compressed in StateMachineIA/JA/A above. If the
 *	entry is not found, returns MAXSTATES. This is the same as the lookup
 *	StateMachine[class][state] if the StateMachine sparse array was
 *	unrolled
 */

- (uint16_t)stateForClass:(uint16_t)charClass state:(uint16)state
{
	size_t min,max,mid;

	/* Find range */
	min = StateMachineIA[state];
	max = StateMachineIA[state+1];

	/* Binary search for value in ja */
	while (min < max) {
		mid = (min + max)/2;
		uint16_t j = StateMachineJA[mid];
		if (charClass == j) {
			return StateMachineA[mid];
		} else if (charClass < j) {
			max = mid;
		} else {
			min = mid+1;
		}
	}
	return MAXSTATES;
}

/*
 *	Internal methods declared within the Lex file
 */


/*
 *	Lex interpreter. This runs the state machine until we find something
 */

- (NSInteger)lex
{
	uint16_t state;
	uint16_t action = MAXACTIONS;

	self.abort = NULL;
	self.value = NULL;
	self.text = NULL;

	/*
	 *	Run until we hit EOF or a production rule triggers a return
	 */

	for (;;) {
		/*
		 *	Start running the DFA
		 */

		state = 0;
		textSize = 0;

		for (;;) {
			int ch = [self input];
			if (ch == -1) {
				/*
				 *	We've hit EOF. If there is no stored text, we assume
				 *	we're at the file EOF, so return EOF. Otherwise treat as
				 *	illegal state transition.
				 */

				if (textSize == 0) return -1;
				break;
			}

			/*
			 *	Attempt to transition to the next state
			 */

			uint16_t charClass = CharClass[ch];
			uint16_t newState = [self stateForClass:charClass state:state];
			if (newState >= MAXSTATES) {
				/* Illegal state transition */
				break;
			}

			/*
			 *	Store the character we read, and transition to the next
			 *	state
			 */

			state = newState;

			if (textSize >= textAlloc) {
				NSInteger toFit = (textAlloc + 256) & ~255;
				if (toFit < 256) toFit = 256;
				unsigned char *ptr = (unsigned char *)realloc(textBuffer, toFit);
				if (ptr == NULL) {
					[NSException raise:NSMallocException format:@"Out of memory"];
				}

				textBuffer = ptr;
				textAlloc = toFit;
			}
			textBuffer[textSize++] = (char)ch;

			/*
			 *	Note the current action if we have one
			 */

			uint16_t newAction = StateActions[state];
			if (newAction != MAXACTIONS) {
				if (!StateEndFlag[newAction] || [self atEOL]) {
					action = newAction;			/* Note action */
					[self mark];				/* Mark location for rewind */
				}
			}
		}

		/*
		 *	If no action is set, we simply abort after setting an internal
		 *	error state. This should never happen in a well designed lexer
		 */

		if (action == MAXACTIONS) {
			self.abort = @"Illegal character sequence";
			return -1;
		}

		/*
		 *	Action is set, so we rewind.
		 */

		[self reset];
		if (textSize == 0) {
			self.abort = @"No characters read in sequence";
			return -1;
		}

		/*
		 *	Convert text sequence into string
		 */

		self.text = [[NSString alloc] initWithBytes:textBuffer length:textSize encoding:NSUTF8StringEncoding];
		self.value = self.text;

		/*
		 *	Execute action
		 */

		switch (action) {
            case 0:
                [self skipComment]; 
                break;

            case 1:
                [self skipComment]; 
                break;

            case 2:
                return AUTO; 
                break;

            case 3:
                return BREAK; 
                break;

            case 4:
                return CASE; 
                break;

            case 5:
                return CHAR; 
                break;

            case 6:
                return CONST; 
                break;

            case 7:
                return CONTINUE; 
                break;

            case 8:
                return DEFAULT; 
                break;

            case 9:
                return DO; 
                break;

            case 10:
                return DOUBLE; 
                break;

            case 11:
                return ELSE; 
                break;

            case 12:
                return ENUM; 
                break;

            case 13:
                return EXTERN; 
                break;

            case 14:
                return FLOAT; 
                break;

            case 15:
                return FOR; 
                break;

            case 16:
                return GOTO; 
                break;

            case 17:
                return IF; 
                break;

            case 18:
                return INT; 
                break;

            case 19:
                return LONG; 
                break;

            case 20:
                return REGISTER; 
                break;

            case 21:
                return RETURN; 
                break;

            case 22:
                return SHORT; 
                break;

            case 23:
                return SIGNED; 
                break;

            case 24:
                return SIZEOF; 
                break;

            case 25:
                return STATIC; 
                break;

            case 26:
                return STRUCT; 
                break;

            case 27:
                return SWITCH; 
                break;

            case 28:
                return TYPEDEF; 
                break;

            case 29:
                return UNION; 
                break;

            case 30:
                return UNSIGNED; 
                break;

            case 31:
                return VOID; 
                break;

            case 32:
                return VOLATILE; 
                break;

            case 33:
                return WHILE; 
                break;

            case 34:
                return [self checkType]; 
                break;

            case 35:
                return CONSTANT; 
                break;

            case 36:
                return CONSTANT; 
                break;

            case 37:
                return CONSTANT; 
                break;

            case 38:
                return CONSTANT; 
                break;

            case 39:
                return CONSTANT; 
                break;

            case 40:
                return CONSTANT; 
                break;

            case 41:
                return CONSTANT; 
                break;

            case 42:
                return STRING_LITERAL; 
                break;

            case 43:
                return ELLIPSIS; 
                break;

            case 44:
                return RIGHT_ASSIGN; 
                break;

            case 45:
                return LEFT_ASSIGN; 
                break;

            case 46:
                return ADD_ASSIGN; 
                break;

            case 47:
                return SUB_ASSIGN; 
                break;

            case 48:
                return MUL_ASSIGN; 
                break;

            case 49:
                return DIV_ASSIGN; 
                break;

            case 50:
                return MOD_ASSIGN; 
                break;

            case 51:
                return AND_ASSIGN; 
                break;

            case 52:
                return XOR_ASSIGN; 
                break;

            case 53:
                return OR_ASSIGN; 
                break;

            case 54:
                return RIGHT_OP; 
                break;

            case 55:
                return LEFT_OP; 
                break;

            case 56:
                return INC_OP; 
                break;

            case 57:
                return DEC_OP; 
                break;

            case 58:
                return PTR_OP; 
                break;

            case 59:
                return AND_OP; 
                break;

            case 60:
                return OR_OP; 
                break;

            case 61:
                return LE_OP; 
                break;

            case 62:
                return GE_OP; 
                break;

            case 63:
                return EQ_OP; 
                break;

            case 64:
                return NE_OP; 
                break;

            case 65:
                return(';'); 
                break;

            case 66:
                return('{'); 
                break;

            case 67:
                return('}'); 
                break;

            case 68:
                return(','); 
                break;

            case 69:
                return(':'); 
                break;

            case 70:
                return('='); 
                break;

            case 71:
                return('('); 
                break;

            case 72:
                return(')'); 
                break;

            case 73:
                return('['); 
                break;

            case 74:
                return(']'); 
                break;

            case 75:
                return('.'); 
                break;

            case 76:
                return('&'); 
                break;

            case 77:
                return('!'); 
                break;

            case 78:
                return('~'); 
                break;

            case 79:
                return('-'); 
                break;

            case 80:
                return('+'); 
                break;

            case 81:
                return('*'); 
                break;

            case 82:
                return('/'); 
                break;

            case 83:
                return('%'); 
                break;

            case 84:
                return('<'); 
                break;

            case 85:
                return('>'); 
                break;

            case 86:
                return('^'); 
                break;

            case 87:
                return('|'); 
                break;

            case 88:
                return('?'); 
                break;

            case 89:
                
                break;

            case 90:
                
                break;

			default:
				break;
		}
	}
}

@end
