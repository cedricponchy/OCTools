/*	OCLexTest.m
 *
 *		This file was automatically generated by OCLex, part of the OCTools
 *	suite available at:
 *
 *		https://github.com/w3woody/OCTools
 */

#import "OCLexTest.h"


#import "Simple.h"


/************************************************************************/
/*                                                                      */
/*  Lex Transition State Tables                                         */
/*                                                                      */
/************************************************************************/

/*
 *  Constants
 */

#define MAXSTATES       263
#define MAXCHARCLASS    63
#define MAXACTIONS      92


//  Character classes used during parsing:
//
//  0: a
//  1: b
//  2: c
//  3: d
//  4: e
//  5: f
//  6: g
//  7: h
//  8: i
//  9: k
//  10: l
//  11: m
//  12: n
//  13: o
//  14: p
//  15: r
//  16: s
//  17: t
//  18: u
//  19: v
//  20: w
//  21: x
//  22: y
//  23: z
//  24: {
//  25: |
//  26: }
//  27: ~
//  28: E
//  29: F
//  30: L
//  31: U
//  32: X
//  33: \[
//  34: \
//  35: \]
//  36: \^
//  37: [G-KM-TVWYZ_jq]
//  38: !
//  39: "
//  40: #
//  41: %
//  42: &
//  43: '
//  44: (
//  45: )
//  46: *
//  47: +
//  48: ,
//  49: \-
//  50: .
//  51: /
//  52: 0
//  53: [1-9]
//  54: :
//  55: ;
//  56: <
//  57: =
//  58: >
//  59: ?
//  60: [\011-\014 ]
//  61: [\000-\010\015-\037$@`-\377]
//  62: [A-D]

/*  CharClass
 *
 *      Maps 8-bit character to character class
 */

static uint16_t CharClass[256] = {
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  60,  60,  60,  60,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     60,  38,  39,  40,  61,  41,  42,  43, 
     44,  45,  46,  47,  48,  49,  50,  51, 
     52,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  55,  56,  57,  58,  59, 
     61,  62,  62,  62,  62,  28,  29,  37, 
     37,  37,  37,  37,  30,  37,  37,  37, 
     37,  37,  37,  37,  37,  31,  37,  37, 
     32,  37,  37,  33,  34,  35,  36,  37, 
     61,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,  37,   9,  10,  11,  12,  13, 
     14,  37,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  24,  25,  26,  27,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61, 
     61,  61,  61,  61,  61,  61,  61,  61
};

/*  StateActions
 *
 *      Maps states to actions. MAXACTION if this is not a terminal
 */

static uint16_t StateActions[263] = {
     92,  83,   2,  35,  35,  35,  35,  35, 
     35,  35,  35,  35,  35,  35,  35,  35, 
     35,  35,  35,  38,  38,  35,  91,  76, 
     91,  86,  85,  81,  80,  82,  84,  77, 
     87,  88,  71,  78,  66,  67,  68,  69, 
     70,  72,  73,  74,  75,  79,  89,  90, 
     91,   0,   1,  50,  35,  35,  35,  35, 
     35,  35,  35,  35,  10,  35,  35,  35, 
     35,  35,  35,  18,  35,  35,  35,  35, 
     35,  35,  35,  35,  35,  35,  35,  92, 
     37,  38,  38,  38,  38,  92,  42,  38, 
     92,  92,  92,  92,  41,  92,  92,  92, 
     43,  55,  63,  56,  62,  67,  74,  47, 
     57,  48,  58,  59,  49,  51,  68,  52, 
     60,  53,  54,  61,  64,  65,  75,  35, 
     35,  35,  35,  35,  35,  35,  35,  35, 
     35,  35,  16,  35,  19,  35,  35,  35, 
     35,  35,  35,  35,  35,  35,  35,  35, 
     35,  35,  35,  35,  36,  37,  37,  37, 
     37,  92,  40,  41,  92,  42,  42,  42, 
     42,  92,  39,  92,  41,  41,  41,  41, 
     44,  92,  45,  46,   3,  35,   5,   6, 
     35,  35,  35,  35,  12,  13,  35,  35, 
     17,  20,  35,  35,  35,  35,  35,  35, 
     35,  35,  35,  35,  35,  32,  35,  35, 
     36,  36,  36,  36,  40,  40,  40,  40, 
     92,  41,  41,  41,  41,  92,  42,  92, 
     41,   4,   7,  35,  35,  35,  35,  15, 
     35,  35,  23,  35,  35,  35,  35,  35, 
     35,  30,  35,  35,  34,  92,  41,  35, 
     35,  11,  14,  35,  22,  24,  25,  26, 
     27,  28,  35,  35,  35,  35,   9,  35, 
     29,  35,  35,   8,  21,  31,  33
};

/*  StateFlag
 *
 *      True if this state starts with ^ or ends with $. Used to
 *  screen rules in these cases.
 */

static uint8_t StateFlag[92] = {
      0,   1,   2,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0
};

/*  StateCond
 *
 *      Index of conditional flag (or 0 if unconditional).
 */

static uint8_t StateCond[92] = {
      0,   0,   1,   2,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0,   0,   0,   0,   0, 
      0,   0,   0,   0
};

/*  StateMachineIA, StateMachineJA, StateMachineA
 *
 *      Lex state machine in compressed sparce row storage format. We do this
 *  in order to compact the resulting sparse matrix state machine so we don't
 *  consume as much space. Decoding the new state becomes an O(log(N)) process
 *  on the input character class as we use a binary search on the JA array.
 *
 *      See the article below for more information:
 *
 *      https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29
 */

static uint16_t StateMachineIA[264] = {
      0,  63,  66,  66,  99, 132, 165, 198, 
    231, 264, 297, 330, 363, 396, 429, 462, 
    495, 528, 561, 594, 605, 614, 649, 711, 
    714, 777, 779, 783, 785, 788, 789, 791, 
    793, 794, 796, 797, 798, 798, 798, 798, 
    798, 799, 799, 799, 799, 799, 799, 799, 
    799, 799, 799, 862, 862, 895, 928, 961, 
    994, 1027, 1060, 1093, 1126, 1159, 1192, 1225, 
    1258, 1291, 1324, 1357, 1390, 1423, 1456, 1489, 
    1522, 1555, 1588, 1621, 1654, 1687, 1720, 1753, 
    1764, 1773, 1777, 1781, 1785, 1789, 1793, 1801, 
    1810, 1872, 1935, 1998, 2061, 2069, 2070, 2133, 
    2196, 2196, 2197, 2197, 2198, 2198, 2198, 2198, 
    2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 
    2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198, 
    2231, 2264, 2297, 2330, 2363, 2396, 2429, 2462, 
    2495, 2528, 2561, 2594, 2627, 2660, 2693, 2726, 
    2759, 2792, 2825, 2858, 2891, 2924, 2957, 2990, 
    3023, 3056, 3089, 3122, 3155, 3170, 3174, 3178, 
    3182, 3186, 3188, 3194, 3202, 3206, 3206, 3206, 
    3206, 3206, 3269, 3269, 3273, 3273, 3273, 3273, 
    3273, 3273, 3336, 3336, 3336, 3369, 3402, 3435, 
    3468, 3501, 3534, 3567, 3600, 3633, 3666, 3699, 
    3732, 3765, 3798, 3831, 3864, 3897, 3930, 3963, 
    3996, 4029, 4062, 4095, 4128, 4161, 4194, 4227, 
    4260, 4264, 4268, 4272, 4276, 4276, 4276, 4276, 
    4276, 4280, 4280, 4280, 4280, 4280, 4282, 4288, 
    4290, 4296, 4329, 4362, 4395, 4428, 4461, 4494, 
    4527, 4560, 4593, 4626, 4659, 4692, 4725, 4758, 
    4791, 4824, 4857, 4890, 4923, 4956, 4958, 4964, 
    4997, 5030, 5063, 5096, 5129, 5162, 5195, 5228, 
    5261, 5294, 5327, 5360, 5393, 5426, 5459, 5492, 
    5525, 5558, 5591, 5624, 5657, 5690, 5723, 5756
};

static uint16_t StateMachineJA[5756] = {
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,  49,  50,  51,  52,  53,  54,  55, 
     56,  57,  58,  59,  60,  61,  62,  46, 
     51,  57,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   4,  10,  18,  21,  28,  30, 
     31,  32,  50,  52,  53,   4,  10,  18, 
     28,  30,  31,  50,  52,  53,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  39,  43,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  24,  25,  26,  27,  28,  29,  30, 
     31,  32,  33,  34,  35,  36,  37,  38, 
     39,  40,  41,  42,  44,  45,  46,  47, 
     48,  49,  50,  51,  52,  53,  54,  55, 
     56,  57,  58,  59,  60,  61,  62,  50, 
     52,  53,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  24,  25,  26,  27,  28,  29, 
     30,  31,  32,  33,  34,  35,  36,  37, 
     38,  39,  40,  41,  42,  43,  44,  45, 
     46,  47,  48,  49,  50,  51,  52,  53, 
     54,  55,  56,  57,  58,  59,  60,  61, 
     62,  57,  58,  41,  54,  56,  57,  47, 
     57,  49,  57,  58,  57,  57,  58,  42, 
     57,  57,  25,  57,  57,  57,  58,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  24, 
     25,  26,  27,  28,  29,  30,  31,  32, 
     33,  34,  35,  36,  37,  38,  39,  40, 
     41,  42,  43,  44,  45,  46,  47,  48, 
     49,  50,  51,  52,  53,  54,  55,  56, 
     57,  58,  59,  60,  61,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,  28, 
     29,  52,  53,  62,   4,  10,  18,  28, 
     30,  31,  50,  52,  53,  10,  18,  30, 
     31,  10,  18,  30,  31,  10,  18,  30, 
     31,  10,  18,  30,  31,  47,  49,  52, 
     53,   4,   5,  10,  28,  29,  30,  52, 
     53,   4,  10,  18,  28,  30,  31,  50, 
     52,  53,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  24,  25,  26,  27,  28,  29, 
     30,  31,  32,  33,  34,  35,  36,  37, 
     38,  39,  40,  41,  42,  44,  45,  46, 
     47,  48,  49,  50,  51,  52,  53,  54, 
     55,  56,  57,  58,  59,  60,  61,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,  49,  50,  51,  52,  53,  54,  55, 
     56,  57,  58,  59,  60,  61,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  24, 
     25,  26,  27,  28,  29,  30,  31,  32, 
     33,  34,  35,  36,  37,  38,  39,  40, 
     41,  42,  43,  44,  45,  46,  47,  48, 
     49,  50,  51,  52,  53,  54,  55,  56, 
     57,  58,  59,  60,  61,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  49, 
     50,  51,  52,  53,  54,  55,  56,  57, 
     58,  59,  60,  61,  62,   4,   5,  10, 
     28,  29,  30,  52,  53,  50,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  49, 
     50,  51,  52,  53,  54,  55,  56,  57, 
     58,  59,  60,  61,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  24,  25,  26, 
     27,  28,  29,  30,  31,  32,  33,  34, 
     35,  36,  37,  38,  39,  40,  41,  42, 
     43,  44,  45,  46,  47,  48,  49,  50, 
     51,  52,  53,  54,  55,  56,  57,  58, 
     59,  60,  61,  62,  57,  57,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,  10,  18,  28,  29,  30,  31,  52, 
     53,  62,  10,  18,  30,  31,  10,  18, 
     30,  31,  10,  18,  30,  31,  10,  18, 
     30,  31,  52,  53,   5,  10,  29,  30, 
     52,  53,   4,   5,  10,  28,  29,  30, 
     52,  53,  47,  49,  52,  53,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  24,  25, 
     26,  27,  28,  29,  30,  31,  32,  33, 
     34,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  49, 
     50,  51,  52,  53,  54,  55,  56,  57, 
     58,  59,  60,  61,  62,  47,  49,  52, 
     53,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  24,  25,  26,  27,  28,  29,  30, 
     31,  32,  33,  34,  35,  36,  37,  38, 
     39,  40,  41,  42,  43,  44,  45,  46, 
     47,  48,  49,  50,  51,  52,  53,  54, 
     55,  56,  57,  58,  59,  60,  61,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,  10,  18,  30,  31, 
     10,  18,  30,  31,  10,  18,  30,  31, 
     10,  18,  30,  31,  47,  49,  52,  53, 
     52,  53,   5,  10,  29,  30,  52,  53, 
     52,  53,   5,  10,  29,  30,  52,  53, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,  52,  53,   5,  10, 
     29,  30,  52,  53,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  28,  29,  30,  31, 
     32,  37,  52,  53,  62,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  28,  29,  30, 
     31,  32,  37,  52,  53,  62,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  21,  22,  23,  28,  29, 
     30,  31,  32,  37,  52,  53,  62,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  28, 
     29,  30,  31,  32,  37,  52,  53,  62, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     28,  29,  30,  31,  32,  37,  52,  53, 
     62,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  28,  29,  30,  31,  32,  37,  52, 
     53,  62,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  28,  29,  30,  31,  32,  37, 
     52,  53,  62,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  28,  29,  30,  31,  32, 
     37,  52,  53,  62
};

static uint16_t StateMachineA[5756] = {
      3,   4,   5,   6,   7,   8,   9,  18, 
     10,  18,  11,  18,  18,  18,  18,  12, 
     13,  14,  15,  16,  17,  18,  18,  18, 
     37,  33,  38,  45,  18,  18,  21,  18, 
     18,  43,  48,  44,  32,  18,  35,  24, 
      2,  30,  31,  22,  41,  42,  29,  27, 
     39,  28,  23,   1,  19,  20,  40,  36, 
     26,  34,  25,  46,  47,  48,  18,  49, 
     50,  51,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  52,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  55,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  56,  53,  53,  53, 
     53,  53,  53,  57,  53,  53,  53,  53, 
     53,  58,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  59,  53,  53,  53,  53,  53,  53, 
     53,  53,  60,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     61,  53,  62,  53,  53,  53,  53,  53, 
     53,  53,  53,  63,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  64,  53,  53,  65,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  66,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  67,  53, 
     53,  53,  53,  53,  53,  68,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  69, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  70, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  71,  72,  53,  53,  53, 
     53,  53,  53,  53,  53,  73,  53,  53, 
     74,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  75,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  76,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  77,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  78, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  85,  83,  81,  79,  85,  84, 
     82,  79,  86,  80,  80,  85,  83,  81, 
     85,  84,  82,  86,  87,  87,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  89,  88,  54,  54, 
     53,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  90,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  93, 
     92,  92,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  94,  95,  95,  95, 
     95,  96,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  98,  97, 101, 102,  99, 100, 104, 
    103, 106, 105, 107, 108, 109, 110, 112, 
    111, 113, 115, 114, 116, 117, 118,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  50,  50, 
     50,  50,  50,  50,  50,  50,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 119, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53, 120,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 121,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53, 122,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    123,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53, 124,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    125,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 126, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 127,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 128,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 129, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 130,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 131,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 132, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 133,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53, 134,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 135,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 136,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
    137,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 138,  53,  53,  53,  53,  53,  53, 
     54,  54,  53, 139,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 140,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53, 141,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 142,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 143,  53, 
     53,  53,  53,  53,  53,  53, 144,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 145, 
     53, 146,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    147,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53, 148, 148, 148, 148, 148, 148, 148, 
    148, 148, 148, 148,  85, 151, 149,  85, 
    152, 150,  86,  80,  80,  83,  81,  84, 
     82,  83,  81,  84,  82,  83,  81,  84, 
     82,  83,  81,  84,  82, 153, 153, 154, 
    154, 156, 157, 159, 156, 158, 160, 155, 
    155,  85,  83,  81,  85,  84,  82,  86, 
     87,  87,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  90,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  94,  95,  95,  95,  95,  96, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161, 161, 161, 
    161, 161, 161, 161, 161, 161,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     90,  91,  91,  91,  91,  91,  91,  91, 
     91, 162,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91, 163, 164, 166, 
    163, 165, 167,  92,  92, 168, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169, 169, 169, 169, 
    169, 169, 169, 169, 169,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  94, 
     95,  95,  95,  95,  96,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95, 170, 171,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 172,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53, 173, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53, 174,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    175,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 176, 177,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53, 178,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53, 179,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53, 180,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 181,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53, 182,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
    183,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 184, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53, 185,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 186,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    187,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 188,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53, 189,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53, 190,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 191,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 192,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 193,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53, 194,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 195,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 196, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53, 197,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53, 198,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53, 199,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53, 148, 148, 148, 148, 148, 
    148, 202, 200, 148, 148, 203, 201, 148, 
    148, 148, 151, 149, 152, 150, 151, 149, 
    152, 150, 151, 149, 152, 150, 151, 149, 
    152, 150, 154, 154, 204, 206, 205, 207, 
    154, 154, 208, 209, 211, 208, 210, 212, 
    155, 155, 213, 213, 214, 214,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     90,  91,  91,  91,  91,  91,  91,  91, 
     91, 162,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91,  91,  91,  91, 
     91,  91,  91,  91,  91, 215, 215, 216, 
    216,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  94,  95,  95,  95,  95, 
     96,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     95,  95,  95,  95,  95,  95,  95,  95, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 217,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 218,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 219,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    220,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 221,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 222,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53, 223,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 224,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 225,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 226,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53, 227,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53, 228, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 229,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53, 230,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53, 231, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53, 232,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 233,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53, 234,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 235,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53, 236, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53, 202, 200, 203, 201, 
    202, 200, 203, 201, 202, 200, 203, 201, 
    202, 200, 203, 201, 237, 237, 238, 238, 
    214, 214, 157, 159, 158, 160, 214, 214, 
    216, 216, 164, 166, 165, 167, 216, 216, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 239,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 240,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
    241,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53, 242,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
    243,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53, 244,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53, 245,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
    246,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53, 247,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 248,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53, 249,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53, 250,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53, 251,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53, 252,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53, 238, 238, 209, 211, 
    210, 212, 238, 238,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 253,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53, 254,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53, 255,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53,  53, 256,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53, 257,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 258,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53, 259,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53, 260,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  54,  54,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  54,  54,  53,  53,  53, 
     53, 261,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  54,  54,  53,  53, 
     53,  53,  53, 262,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  54,  54,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  54,  54, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  54, 
     54,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     54,  54,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  53,  53,  53,  53,  53,  53,  53, 
     53,  54,  54,  53
};

/*
 *	Internal storage
 */

@interface OCLexTest ()
{
	// Read position support
	NSInteger curLine;
	NSInteger curColumn;

	// Mark location support
	NSInteger markLine;
	NSInteger markColumn;

	// Mark buffer storage
	BOOL isMarked;							// yes if we have mark set
	unsigned char *markBuffer;				// mark buffer
	NSInteger markSize;						// bytes stored in buffer
	NSInteger markAlloc;					// capacity of buffer

	// Read cache
	unsigned char *readBuffer;				// read cache buffer
	NSInteger readPos;						// Read position
	NSInteger readSize;						// size of data in read buffer
	NSInteger readAlloc;					// Capacity of read cache

	// Text read buffer
	unsigned char *textBuffer;				// text cache for reading buffer
	NSInteger textMarkSize;
	NSInteger textSize;
	NSInteger textAlloc;
	
	// State flags
	uint64_t  states;
}

@property (strong) id<OCFileInput> file;

@end

/*
 *	Class lexer
 */

@implementation OCLexTest

/*
 *	Instantiate parser.
 */

- (instancetype)initWithStream:(id<OCFileInput>)file
{
	if (nil != (self = [super init])) {
		self.file = file;

		isMarked = NO;
		markSize = 0;
		markAlloc = 256;
		markBuffer = (unsigned char *)malloc(markAlloc);

		readPos = 0;
		readSize = 0;
		readAlloc = 256;
		readBuffer = (unsigned char *)malloc(readAlloc);

		textMarkSize = 0;
		textSize = 0;
		textAlloc = 256;
		textBuffer = (unsigned char *)malloc(textAlloc);
		
		states = 0;

	}
	return self;
}

/*
 *	Free internal storage
 */

- (void)dealloc
{
	if (markBuffer) free(markBuffer);
	if (readBuffer) free(readBuffer);
	if (textBuffer) free(textBuffer);
}

/*
 *	Internal read backtrack support. We implement the internal methods
 *	for mark, unmark and reset to note the current file position. This is
 *	used by the lexer to unwind the read queue if we overread the number
 *	of characters during parsing
 *
 *	In essence, as we execute the DFA while we read characters, when we
 *	find an end state, we mark the stream. Then we continue to read until
 *	we reach an error--at which point we rewind back to the mark location.
 */

/*
 *	mark: note that we should cache characters being read so we can rewind
 *	to this location in the future
 */

- (void)mark
{
	/*
	 *	Store the current file location and enable marking. This has the side
	 *	effect of flushing any previous mark buffer
	 */

	markLine = curLine;
	markColumn = curColumn;
	textMarkSize = textSize;

	isMarked = YES;
	markSize = 0;
}

/*
 *	Reset: reset the buffer positions
 */

- (void)reset
{
	if (!isMarked) return;	// not marked, nothing to do.

	/*
	 *	Reset to the marked position. We maintain two mutable data objects,
	 *	one which stores the data we're reading from (if any), and one which
	 *	stores the marked data.
	 *
	 *	Reset does two things: it prepends the read buffer with the data we
	 *	stored during the mark phase, and we clear the mark flag.
	 */

	if (markSize + readSize - readPos > readAlloc) {
		/*
		 *	Resize to fit
		 */

		NSInteger toFit = markSize + readSize - readPos;
		toFit = (toFit + 255) & ~255;	// align to 256 byte boundary
		if (toFit < 0) toFit = 256;

		unsigned char *ptr = (unsigned char *)realloc(readBuffer, toFit);
		if (ptr == NULL) {
			[NSException raise:NSMallocException format:@"Out of memory"];
		}

		readBuffer = ptr;
		readAlloc = toFit;
	}

	/*
	 *	Move the contents of the read buffer to a location above where the
	 *	mark queue will go
	 */

	if (readPos < readSize) {
		memmove(markSize + readBuffer, readPos + readBuffer, readSize - readPos);
	}

	/*
	 *	Move the marked data
	 */

	if (markSize > 0) {
		memmove(readBuffer, markBuffer, markSize);
	}

	/*
	 *	Update the read buffer settings
	 */

	readSize = markSize + readSize - readPos;
	readPos = 0;

	/*
	 *	Clear the mark
	 */

	isMarked = NO;
	markSize = 0;

	/*
	 *	Update the file position
	 */

	curLine = markLine;
	curColumn = markColumn;
	textSize = textMarkSize;
}

/*
 *	Read input stream.
 */

- (int)input
{
	int ch;

	/*
	 *	Low level: read, if from marked buffer
	 */

	if (readPos < readSize) {
		ch = readBuffer[readPos++];
	} else {
		ch = [self.file readByte];

		if (ch == -1) return -1;		// At EOF; immediate return.
	}

	/*
	 *	Update file position
	 */

	if (ch == '\n') {
		curColumn = 0;
		++curLine;
	} else {
		++curColumn;
	}

	/*
	 *	Handle mark
	 */

	if (isMarked) {
		if (markSize >= markAlloc) {
			NSInteger toFit = (markAlloc + 256) & ~255;
			if (toFit < 256) toFit = 256;
			unsigned char *ptr = (unsigned char *)realloc(markBuffer, toFit);
			if (ptr == NULL) {
				[NSException raise:NSMallocException format:@"Out of memory"];
			}

			markBuffer = ptr;
			markAlloc = toFit;
		}
		markBuffer[markSize++] = (unsigned char)ch;
	}

	/*
	 *	Return read character.
	 */

	return ch;
}

/*
 *	Read ahead to determine if we're at the EOL
 */

- (BOOL)atEOL
{
	int ch;

	if (readPos < readSize) {
		ch = readBuffer[readPos];
	} else {
		ch = [self.file peekByte];
	}

	if ((ch == -1) || (ch == '\n')) return YES;
	return NO;
}

- (BOOL)atSOL
{
	return self.column == 0;
}

/*
 *	Read the state for the class/state combination. Decodes the sparce 
 *	matrix that is compressed in StateMachineIA/JA/A above. If the
 *	entry is not found, returns MAXSTATES. This is the same as the lookup
 *	StateMachine[class][state] if the StateMachine sparse array was
 *	unrolled
 */

- (uint16_t)stateForClass:(uint16_t)charClass state:(uint16)state
{
	size_t min,max,mid;

	/* Find range */
	min = StateMachineIA[state];
	max = StateMachineIA[state+1];

	/* Binary search for value in ja */
	while (min < max) {
		mid = (min + max)/2;
		uint16_t j = StateMachineJA[mid];
		if (charClass == j) {
			return StateMachineA[mid];
		} else if (charClass < j) {
			max = mid;
		} else {
			min = mid+1;
		}
	}
	return MAXSTATES;
}

/*
 *	Internal methods declared within the Lex file
 */


/*
 *	Lex interpreter. This runs the state machine until we find something
 */

- (NSInteger)lex
{
	uint16_t state;
	uint16_t action = MAXACTIONS;

	self.abort = NULL;
	self.value = NULL;
	self.text = NULL;

	/*
	 *	Run until we hit EOF or a production rule triggers a return
	 */

	for (;;) {
		/*
		 *	Start running the DFA
		 */

		state = 0;
		textSize = 0;
		
		self.line = curLine;
		self.column = curColumn;

		for (;;) {
			int ch = [self input];
			if (ch == -1) {
				/*
				 *	We've hit EOF. If there is no stored text, we assume
				 *	we're at the file EOF, so return EOF. Otherwise treat as
				 *	illegal state transition.
				 */

				if (textSize == 0) return -1;
				break;
			}

			/*
			 *	Attempt to transition to the next state
			 */

			uint16_t charClass = CharClass[ch];
			uint16_t newState = [self stateForClass:charClass state:state];
			if (newState >= MAXSTATES) {
				/* Illegal state transition */
				break;
			}

			/*
			 *	Store the character we read, and transition to the next
			 *	state
			 */

			state = newState;

			if (textSize >= textAlloc) {
				NSInteger toFit = (textAlloc + 256) & ~255;
				if (toFit < 256) toFit = 256;
				unsigned char *ptr = (unsigned char *)realloc(textBuffer, toFit);
				if (ptr == NULL) {
					[NSException raise:NSMallocException format:@"Out of memory"];
				}

				textBuffer = ptr;
				textAlloc = toFit;
			}
			textBuffer[textSize++] = (char)ch;

			/*
			 *	Note the current action if we have one
			 */

			uint16_t newAction = StateActions[state];
			if (newAction != MAXACTIONS) {
				if (!(StateFlag[newAction] & 1) || [self atEOL]) {
					if (!(StateFlag[newAction] & 2) || [self atSOL]) {
						if ((StateCond[newAction] == 0) || (0 != (state & (1L << (StateCond[newAction]-1))))) {
							action = newAction;			/* Note action */
							[self mark];				/* Mark location for rewind */
						}
					}
				}
			}
		}

		/*
		 *	If no action is set, we simply abort after setting an internal
		 *	error state. This should never happen in a well designed lexer
		 */

		if (action == MAXACTIONS) {
			self.abort = @"Illegal character sequence";
			return -1;
		}

		/*
		 *	Action is set, so we rewind.
		 */

		[self reset];
		if (textSize == 0) {
			self.abort = @"No characters read in sequence";
			return -1;
		}

		/*
		 *	Convert text sequence into string
		 */

		self.text = [[NSString alloc] initWithBytes:textBuffer length:textSize encoding:NSUTF8StringEncoding];
		self.value = self.text;

		/*
		 *	Execute action
		 */

		switch (action) {
            case 0:
                [self skipComment]; 
                break;

            case 1:
                [self skipComment]; 
                break;

            case 2:
                return 1; 
                break;

            case 3:
                states |= 1; return AUTO; 
                break;

            case 4:
                return BREAK; 
                break;

            case 5:
                return CASE; 
                break;

            case 6:
                states &= ~2; return CHAR; 
                break;

            case 7:
                states = 0; return CONST; 
                break;

            case 8:
                return CONTINUE; 
                break;

            case 9:
                return DEFAULT; 
                break;

            case 10:
                return DO; 
                break;

            case 11:
                return DOUBLE; 
                break;

            case 12:
                return ELSE; 
                break;

            case 13:
                return ENUM; 
                break;

            case 14:
                return EXTERN; 
                break;

            case 15:
                return FLOAT; 
                break;

            case 16:
                return FOR; 
                break;

            case 17:
                return GOTO; 
                break;

            case 18:
                return IF; 
                break;

            case 19:
                return INT; 
                break;

            case 20:
                return LONG; 
                break;

            case 21:
                return REGISTER; 
                break;

            case 22:
                return RETURN; 
                break;

            case 23:
                return SHORT; 
                break;

            case 24:
                return SIGNED; 
                break;

            case 25:
                return SIZEOF; 
                break;

            case 26:
                return STATIC; 
                break;

            case 27:
                return STRUCT; 
                break;

            case 28:
                return SWITCH; 
                break;

            case 29:
                return TYPEDEF; 
                break;

            case 30:
                return UNION; 
                break;

            case 31:
                return UNSIGNED; 
                break;

            case 32:
                return VOID; 
                break;

            case 33:
                return VOLATILE; 
                break;

            case 34:
                return WHILE; 
                break;

            case 35:
                return [self checkType]; 
                break;

            case 36:
                return CONSTANT; 
                break;

            case 37:
                return CONSTANT; 
                break;

            case 38:
                return CONSTANT; 
                break;

            case 39:
                return CONSTANT; 
                break;

            case 40:
                return CONSTANT; 
                break;

            case 41:
                return CONSTANT; 
                break;

            case 42:
                return CONSTANT; 
                break;

            case 43:
                return STRING_LITERAL; 
                break;

            case 44:
                return ELLIPSIS; 
                break;

            case 45:
                return RIGHT_ASSIGN; 
                break;

            case 46:
                return LEFT_ASSIGN; 
                break;

            case 47:
                return ADD_ASSIGN; 
                break;

            case 48:
                return SUB_ASSIGN; 
                break;

            case 49:
                return MUL_ASSIGN; 
                break;

            case 50:
                return DIV_ASSIGN; 
                break;

            case 51:
                return MOD_ASSIGN; 
                break;

            case 52:
                return AND_ASSIGN; 
                break;

            case 53:
                return XOR_ASSIGN; 
                break;

            case 54:
                return OR_ASSIGN; 
                break;

            case 55:
                return RIGHT_OP; 
                break;

            case 56:
                return LEFT_OP; 
                break;

            case 57:
                return INC_OP; 
                break;

            case 58:
                return DEC_OP; 
                break;

            case 59:
                return PTR_OP; 
                break;

            case 60:
                return AND_OP; 
                break;

            case 61:
                return OR_OP; 
                break;

            case 62:
                return LE_OP; 
                break;

            case 63:
                return GE_OP; 
                break;

            case 64:
                return EQ_OP; 
                break;

            case 65:
                return NE_OP; 
                break;

            case 66:
                return(';'); 
                break;

            case 67:
                return('{'); 
                break;

            case 68:
                return('}'); 
                break;

            case 69:
                return(','); 
                break;

            case 70:
                return(':'); 
                break;

            case 71:
                return('='); 
                break;

            case 72:
                return('('); 
                break;

            case 73:
                return(')'); 
                break;

            case 74:
                return('['); 
                break;

            case 75:
                return(']'); 
                break;

            case 76:
                return('.'); 
                break;

            case 77:
                return('&'); 
                break;

            case 78:
                return('!'); 
                break;

            case 79:
                return('~'); 
                break;

            case 80:
                return('-'); 
                break;

            case 81:
                return('+'); 
                break;

            case 82:
                return('*'); 
                break;

            case 83:
                return('/'); 
                break;

            case 84:
                return('%'); 
                break;

            case 85:
                return('<'); 
                break;

            case 86:
                return('>'); 
                break;

            case 87:
                return('^'); 
                break;

            case 88:
                return('|'); 
                break;

            case 89:
                return('?'); 
                break;

            case 90:
                
                break;

            case 91:
                
                break;

			default:
				break;
		}
	}
}

@end
