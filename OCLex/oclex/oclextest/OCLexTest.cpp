/*	OCLexTest.cpp
 *
 *		This file was automatically generated by OCLex, part of the OCTools
 *	suite available at:
 *
 *		https://github.com/w3woody/OCTools
 */

#include "OCLexTest.h"
#include <stdlib.h>
#include <string.h>
#include <new>



#include "OCYaccTest.h"

 
#define ABSTRACT                                      0x00110002
#define ADD_ASSIGN                                    0x00110003
#define AND_ASSIGN                                    0x00110004
#define AND_OP                                        0x00110005
#define BREAK                                         0x00110006
#define BYTE                                          0x00110007
#define CASE                                          0x00110008
#define CHAR_LITERAL                                  0x00110009
#define CLASS                                         0x0011000a
#define CONTINUE                                      0x0011000b
#define DEC_OP                                        0x0011000c
#define DEFAULT                                       0x0011000d
#define DELETE                                        0x0011000e
#define DIV_ASSIGN                                    0x0011000f
#define DO                                            0x00110010
#define DOUBLE                                        0x00110011
#define ELSE                                          0x00110012
#define EQ_OP                                         0x00110013
#define FLOAT                                         0x00110014
#define FOR                                           0x00110015
#define FUNCCALL                                      0x00110016
#define GE_OP                                         0x00110017
#define GOSUB                                         0x00110018
#define GOTO                                          0x00110019
#define IDENTIFIER                                    0x0011001a
#define IF                                            0x0011001b
#define IFSTATEMENT                                   0x0011001c
#define INC_OP                                        0x0011001d
#define INT                                           0x0011001e
#define INTEGER_CONSTANT                              0x0011001f
#define LEFT_ASSIGN                                   0x00110020
#define LEFT_OP                                       0x00110021
#define LE_OP                                         0x00110022
#define LONG                                          0x00110023
#define MOD_ASSIGN                                    0x00110024
#define MUL_ASSIGN                                    0x00110025
#define NEW                                           0x00110026
#define NE_OP                                         0x00110027
#define OR_ASSIGN                                     0x00110028
#define OR_OP                                         0x00110029
#define POSTDEC                                       0x0011002a
#define POSTINC                                       0x0011002b
#define PREDEC                                        0x0011002c
#define PREFIXOP                                      0x0011002d
#define PREINC                                        0x0011002e
#define PTR_OP                                        0x0011002f
#define REAL_CONSTANT                                 0x00110030
#define RETURN                                        0x00110031
#define RIGHT_ASSIGN                                  0x00110032
#define RIGHT_OP                                      0x00110033
#define SHORT                                         0x00110034
#define SIZEOF                                        0x00110035
#define STRING_LITERAL                                0x00110036
#define STRUCT                                        0x00110037
#define SUBSCRIPT                                     0x00110038
#define SUB_ASSIGN                                    0x00110039
#define SWITCH                                        0x0011003a
#define TERNOP                                        0x0011003b
#define TYPE_NAME                                     0x0011003c
#define UNSIGNED                                      0x0011003d
#define VOID                                          0x0011003e
#define WHILE                                         0x0011003f
#define XOR_ASSIGN                                    0x00110040


/************************************************************************/
/*                                                                      */
/*  Lex Transition State Tables                                         */
/*                                                                      */
/************************************************************************/

/*
 *  Constants
 */

#define MAXSTATES       222
#define MAXCHARCLASS    49
#define MAXACTIONS      61


//  Character classes used during parsing:
//
//  0: a
//  1: b
//  2: c
//  3: d
//  4: e
//  5: f
//  6: g
//  7: h
//  8: i
//  9: k
//  10: l
//  11: n
//  12: o
//  13: r
//  14: s
//  15: t
//  16: u
//  17: v
//  18: w
//  19: y
//  20: z
//  21: |
//  22: E
//  23: F
//  24: L
//  25: U
//  26: [Xx]
//  27: \
//  28: \^
//  29: [G-KM-TVWYZ_jmpq]
//  30: !
//  31: "
//  32: %
//  33: &
//  34: '
//  35: *
//  36: +
//  37: \-
//  38: .
//  39: /
//  40: 0
//  41: [1-9]
//  42: <
//  43: =
//  44: >
//  45: \012
//  46: [\011\013\014 ]
//  47: [\000-\010\015-\037#$(),:;?@\[\]`{}-\377]
//  48: [A-D]

/*  CharClass
 *
 *      Maps 8-bit character to character class
 */

static uint16_t CharClass[256] = {
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  46,  45,  46,  46,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     46,  30,  31,  47,  47,  32,  33,  34, 
     47,  47,  35,  36,  47,  37,  38,  39, 
     40,  41,  41,  41,  41,  41,  41,  41, 
     41,  41,  47,  47,  42,  43,  44,  47, 
     47,  48,  48,  48,  48,  22,  23,  29, 
     29,  29,  29,  29,  24,  29,  29,  29, 
     29,  29,  29,  29,  29,  25,  29,  29, 
     26,  29,  29,  47,  27,  47,  28,  29, 
     47,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,  29,   9,  10,  29,  11,  12, 
     29,  29,  13,  14,  15,  16,  17,  18, 
     26,  19,  20,  47,  21,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47, 
     47,  47,  47,  47,  47,  47,  47,  47
};

/*  StateActions
 *
 *      Maps states to actions. MAXACTION if this is not a terminal
 */

static uint16_t StateActions[222] = {
     61,  60,  29,  29,  29,  29,  29,  29, 
     29,  29,  29,  29,  29,  29,  29,  29, 
     29,  29,  32,  32,  60,  60,  60,  60, 
     60,  60,  60,  60,  60,  60,  60,  60, 
     60,  60,  59,  60,   0,  61,  43,  29, 
     29,  29,  29,  29,  29,  29,  29,  29, 
     10,  29,  29,  29,  29,  17,  29,  29, 
     29,  29,  29,  29,  29,  29,  29,  29, 
     29,  61,  31,  32,  32,  32,  32,  61, 
     36,  32,  61,  61,  35,  61,  61,  37, 
     48,  56,  49,  55,  40,  50,  41,  51, 
     52,  42,  44,  45,  53,  46,  47,  54, 
     57,  58,  61,   1,  29,  29,  29,  29, 
     29,  29,  29,  29,  29,  29,  29,  14, 
     29,  29,  18,  19,  29,  29,  29,  29, 
     29,  29,  29,  29,  29,  30,  31,  31, 
     31,  31,  61,  34,  35,  61,  36,  36, 
     36,  36,  61,  33,  61,  35,  35,  35, 
     35,  61,  38,  39,  29,  29,   4,   5, 
     29,  29,  29,  29,  29,  12,  29,  15, 
     29,  20,  29,  29,  29,  29,  29,  29, 
     27,  29,  30,  30,  30,  30,  34,  34, 
     34,  34,  61,  35,  35,  35,  35,  61, 
     36,  61,  35,  29,   3,   6,  29,  29, 
     29,  29,  13,  16,  29,  22,  29,  29, 
     29,  29,  28,  61,  35,  29,  29,  29, 
      9,  11,  21,  23,  24,  25,  29,  29, 
     29,   8,  29,   2,   7,  26
};

/*  StateMachineIA, StateMachineJA, StateMachineA
 *
 *      Lex state machine in compressed sparce row storage format. We do this
 *  in order to compact the resulting sparse matrix state machine so we don't
 *  consume as much space. Decoding the new state becomes an O(log(N)) process
 *  on the input character class as we use a binary search on the JA array.
 *
 *      See the article below for more information:
 *
 *      https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR.2C_CRS_or_Yale_format.29
 */

static uint16_t StateMachineIA[223] = {
      0,  49,  52,  82, 112, 142, 172, 202, 
    232, 262, 292, 322, 352, 382, 412, 442, 
    472, 502, 532, 542, 551, 599, 601, 650, 
    652, 654, 656, 659, 660, 661, 663, 664, 
    666, 667, 668, 668, 668, 668, 717, 717, 
    747, 777, 807, 837, 867, 897, 927, 957, 
    987, 1017, 1047, 1077, 1107, 1137, 1167, 1197, 
    1227, 1257, 1287, 1317, 1347, 1377, 1407, 1437, 
    1467, 1497, 1508, 1517, 1521, 1525, 1529, 1533, 
    1537, 1545, 1554, 1603, 1652, 1660, 1709, 1758, 
    1758, 1759, 1759, 1760, 1760, 1760, 1760, 1760, 
    1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760, 
    1760, 1760, 1760, 1809, 1809, 1839, 1869, 1899, 
    1929, 1959, 1989, 2019, 2049, 2079, 2109, 2139, 
    2169, 2199, 2229, 2259, 2289, 2319, 2349, 2379, 
    2409, 2439, 2469, 2499, 2529, 2559, 2574, 2578, 
    2582, 2586, 2590, 2592, 2598, 2606, 2610, 2610, 
    2610, 2610, 2610, 2659, 2659, 2663, 2663, 2663, 
    2663, 2663, 2712, 2712, 2712, 2742, 2772, 2802, 
    2832, 2862, 2892, 2922, 2952, 2982, 3012, 3042, 
    3072, 3102, 3132, 3162, 3192, 3222, 3252, 3282, 
    3312, 3342, 3372, 3376, 3380, 3384, 3388, 3388, 
    3388, 3388, 3388, 3392, 3392, 3392, 3392, 3392, 
    3394, 3400, 3402, 3408, 3438, 3468, 3498, 3528, 
    3558, 3588, 3618, 3648, 3678, 3708, 3738, 3768, 
    3798, 3828, 3858, 3888, 3890, 3896, 3926, 3956, 
    3986, 4016, 4046, 4076, 4106, 4136, 4166, 4196, 
    4226, 4256, 4286, 4316, 4346, 4376, 4406
};

static uint16_t StateMachineJA[4406] = {
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,  35,  39,  43,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   4,  10,  16,  22, 
     24,  25,  26,  38,  40,  41,   4,  10, 
     16,  22,  24,  25,  38,  40,  41,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  24, 
     25,  26,  27,  28,  29,  30,  31,  32, 
     33,  35,  36,  37,  38,  39,  40,  41, 
     42,  43,  44,  45,  46,  47,  48,  40, 
     41,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  21,  22, 
     23,  24,  25,  26,  27,  28,  29,  30, 
     31,  32,  33,  34,  35,  36,  37,  38, 
     39,  40,  41,  42,  43,  44,  45,  46, 
     47,  48,  43,  44,  42,  43,  36,  43, 
     37,  43,  44,  43,  43,  33,  43,  43, 
     21,  43,  43,  43,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  24,  25,  26,  27, 
     28,  29,  30,  31,  32,  33,  34,  35, 
     36,  37,  38,  39,  40,  41,  42,  43, 
     44,  45,  46,  47,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,  22, 
     23,  40,  41,  48,   4,  10,  16,  22, 
     24,  25,  38,  40,  41,  10,  16,  24, 
     25,  10,  16,  24,  25,  10,  16,  24, 
     25,  10,  16,  24,  25,  36,  37,  40, 
     41,   4,   5,  10,  22,  23,  24,  40, 
     41,   4,  10,  16,  22,  24,  25,  38, 
     40,  41,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  24,  25,  26,  27,  28,  29, 
     30,  31,  32,  33,  34,  35,  36,  37, 
     38,  39,  40,  41,  42,  43,  44,  45, 
     46,  47,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     21,  22,  23,  24,  25,  26,  27,  28, 
     29,  30,  31,  32,  33,  34,  35,  36, 
     37,  38,  39,  40,  41,  42,  43,  44, 
     45,  46,  47,  48,   4,   5,  10,  22, 
     23,  24,  40,  41,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  21,  22,  23,  24,  25,  26,  27, 
     28,  29,  30,  31,  32,  33,  34,  35, 
     36,  37,  38,  39,  40,  41,  42,  43, 
     44,  45,  46,  47,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  21,  22,  23,  24,  25,  26, 
     27,  28,  29,  30,  31,  32,  33,  34, 
     35,  36,  37,  38,  39,  40,  41,  42, 
     43,  44,  45,  46,  47,  48,  43,  43, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  21,  22,  23, 
     24,  25,  26,  27,  28,  29,  30,  31, 
     32,  33,  34,  35,  36,  37,  38,  39, 
     40,  41,  42,  43,  44,  45,  46,  47, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  22,  23,  24,  25, 
     26,  29,  40,  41,  48,   0,   1,   2, 
      3,   4,   5,   6,   7,   8,   9,  10, 
     11,  12,  13,  14,  15,  16,  17,  18, 
     19,  20,  22,  23,  24,  25,  26,  29, 
     40,  41,  48,   0,   1,   2,   3,   4, 
      5,   6,   7,   8,   9,  10,  11,  12, 
     13,  14,  15,  16,  17,  18,  19,  20, 
     22,  23,  24,  25,  26,  29,  40,  41, 
     48,   0,   1,   2,   3,   4,   5,   6, 
      7,   8,   9,  10,  11,  12,  13,  14, 
     15,  16,  17,  18,  19,  20,  22,  23, 
     24,  25,  26,  29,  40,  41,  48,   0, 
      1,   2,   3,   4,   5,  10,  16,  22, 
     23,  24,  25,  40,  41,  48,  10,  16, 
     24,  25,  10,  16,  24,  25,  10,  16, 
     24,  25,  10,  16,  24,  25,  40,  41, 
      5,  10,  23,  24,  40,  41,   4,   5, 
     10,  22,  23,  24,  40,  41,  36,  37, 
     40,  41,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  21, 
     22,  23,  24,  25,  26,  27,  28,  29, 
     30,  31,  32,  33,  34,  35,  36,  37, 
     38,  39,  40,  41,  42,  43,  44,  45, 
     46,  47,  48,  36,  37,  40,  41,   0, 
      1,   2,   3,   4,   5,   6,   7,   8, 
      9,  10,  11,  12,  13,  14,  15,  16, 
     17,  18,  19,  20,  21,  22,  23,  24, 
     25,  26,  27,  28,  29,  30,  31,  32, 
     33,  34,  35,  36,  37,  38,  39,  40, 
     41,  42,  43,  44,  45,  46,  47,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,  10,  16,  24,  25, 
     10,  16,  24,  25,  10,  16,  24,  25, 
     10,  16,  24,  25,  36,  37,  40,  41, 
     40,  41,   5,  10,  23,  24,  40,  41, 
     40,  41,   5,  10,  23,  24,  40,  41, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
     40,  41,   5,  10,  23,  24,  40,  41, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48,   0,   1, 
      2,   3,   4,   5,   6,   7,   8,   9, 
     10,  11,  12,  13,  14,  15,  16,  17, 
     18,  19,  20,  22,  23,  24,  25,  26, 
     29,  40,  41,  48,   0,   1,   2,   3, 
      4,   5,   6,   7,   8,   9,  10,  11, 
     12,  13,  14,  15,  16,  17,  18,  19, 
     20,  22,  23,  24,  25,  26,  29,  40, 
     41,  48,   0,   1,   2,   3,   4,   5, 
      6,   7,   8,   9,  10,  11,  12,  13, 
     14,  15,  16,  17,  18,  19,  20,  22, 
     23,  24,  25,  26,  29,  40,  41,  48, 
      0,   1,   2,   3,   4,   5,   6,   7, 
      8,   9,  10,  11,  12,  13,  14,  15, 
     16,  17,  18,  19,  20,  22,  23,  24, 
     25,  26,  29,  40,  41,  48
};

static uint16_t StateMachineA[4406] = {
      2,   3,   4,   5,   6,   7,   8,  17, 
      9,  17,  11,  10,  17,  12,  13,  17, 
     14,  15,  16,  17,  17,  31,  17,  17, 
     17,  17,  17,  35,  30,  17,  33,  22, 
     28,  29,  20,  27,  25,  26,  21,   1, 
     18,  19,  24,  32,  23,  34,  34,  35, 
     17,  36,  37,  38,  40,  39,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  42, 
     40,  40,  40,  40,  40,  43,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     44,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  45,  40,  46,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  47,  40,  40,  40,  40,  40, 
     40,  40,  48,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  49,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  50,  40,  51,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  52,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  53,  40,  40,  40,  40, 
     40,  54,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     55,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  56,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  57,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  58,  59,  40, 
     40,  40,  40,  40,  40,  60,  40,  40, 
     61,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  62, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  63,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  64, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  71,  69,  67,  71, 
     70,  68,  65,  72,  66,  66,  71,  69, 
     67,  71,  70,  68,  72,  73,  73,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  74,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  76, 
     76,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  77,  78,  78,  78, 
     79,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  81,  80,  82,  83,  85,  84, 
     87,  86,  88,  89,  90,  92,  91,  93, 
     95,  94,  96,  97,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  99,  98,  98,  98,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 100,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40, 101,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40, 102,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 103,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40, 104,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40, 105,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40, 106,  40,  40,  40,  40, 107, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 108,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 109, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 110,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40, 111,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 113, 112,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 114,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 115, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 116,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
    117,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 118,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 119,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
    120,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 121,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 122,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 123,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 124,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40, 125, 125, 125, 125, 125, 125, 125, 
    125, 125, 125, 125,  71, 128, 126,  71, 
    129, 127,  72,  66,  66,  69,  67,  70, 
     68,  69,  67,  70,  68,  69,  67,  70, 
     68,  69,  67,  70,  68, 130, 130, 131, 
    131, 133, 134, 136, 133, 135, 137, 132, 
    132,  71,  69,  67,  71,  70,  68,  72, 
     73,  73, 138, 138, 138, 138, 138, 138, 
    138, 138, 138, 138, 138, 138, 138, 138, 
    138, 138, 138, 138, 138, 138, 138, 138, 
    138, 138, 138, 138, 138, 138, 138, 138, 
    138, 138, 138, 138, 138, 138, 138, 138, 
    138, 138, 138, 138, 138, 138, 138, 138, 
    138, 138, 138,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  74,  75, 
     75,  75,  75,  75,  75, 139,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75, 140, 141, 143, 140, 
    142, 144,  76,  76, 145, 145, 145, 145, 
    145, 145, 145, 145, 145, 145, 145, 145, 
    145, 145, 145, 145, 145, 145, 145, 145, 
    145, 145, 145, 145, 145, 145, 145, 145, 
    145, 145, 145, 145, 145, 145, 145, 145, 
    145, 145, 145, 145, 145, 145, 145, 145, 
    145, 145, 145, 145, 145,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     77,  78,  78,  78,  79,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78, 146, 147, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  98,  98,  98, 
     98,  98,  98,  98,  98,  99,  98,  98, 
     98,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
    148,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40, 149, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40, 150,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40, 151, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 152, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 153,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40, 154,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40, 155, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40, 156,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40, 157,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40, 158,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 159,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 160, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40, 161, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 162, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40, 163,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40,  40, 164, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 165,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 166,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  41,  41,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 167,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     41,  41,  40,  40,  40,  40, 168,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  41,  41, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 169,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  41,  41,  40, 125, 
    125, 125, 125, 125, 125, 172, 170, 125, 
    125, 173, 171, 125, 125, 125, 128, 126, 
    129, 127, 128, 126, 129, 127, 128, 126, 
    129, 127, 128, 126, 129, 127, 131, 131, 
    174, 176, 175, 177, 131, 131, 178, 179, 
    181, 178, 180, 182, 132, 132, 183, 183, 
    184, 184,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75,  75,  75,  74,  75,  75, 
     75,  75,  75,  75, 139,  75,  75,  75, 
     75,  75,  75,  75,  75,  75,  75,  75, 
     75,  75,  75, 185, 185, 186, 186,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  77,  78,  78,  78,  79,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     78,  78,  78,  78,  78,  78,  78,  78, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 187,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 188, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 189,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 190,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40, 191,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 192,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40, 193,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 194,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40, 195,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 196,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 197,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40, 198,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
    199,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40, 200,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
    201,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40, 202,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40, 172, 170, 173, 171, 
    172, 170, 173, 171, 172, 170, 173, 171, 
    172, 170, 173, 171, 203, 203, 204, 204, 
    184, 184, 134, 136, 135, 137, 184, 184, 
    186, 186, 141, 143, 142, 144, 186, 186, 
    205,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40, 206,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40, 207,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40, 208,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
    209,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40, 210,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40, 211, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 212, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40, 213,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40, 214, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
    204, 204, 179, 181, 180, 182, 204, 204, 
     40,  40, 215,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40, 216,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 217,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40,  40, 218,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40, 219,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40, 220,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40,  40,  40, 
     40, 221,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  41,  41,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  41, 
     41,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  41,  41,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  40,  40,  40,  40,  40, 
     40,  40,  40,  41,  41,  40
};


/************************************************************************/
/*                                                                      */
/*  Construction/Destruction                                            */
/*                                                                      */
/************************************************************************/

/*	OCLexTest::OCLexTest
 *
 *		Constructor
 */

OCLexTest::OCLexTest(OCFileInput *f)
{
	file = f;

	isMarked = false;

	markSize = 0;
	markAlloc = 256;
	markBuffer = (unsigned char *)malloc(markAlloc);

	readPos = 0;
	readSize = 0;
	readAlloc = 256;
	readBuffer = (unsigned char *)malloc(readAlloc);

	textMarkSize = 0;
	textSize = 0;
	textAlloc = 256;
	textBuffer = (unsigned char *)malloc(textAlloc);

	states = 0;

}

/*	OCLexTest::~OCLexTest
 *
 *		Destructor
 */

OCLexTest::~OCLexTest(void)
{
	if (markBuffer) free(markBuffer);
	if (readBuffer) free(readBuffer);
	if (textBuffer) free(textBuffer);

}

/*
 *	Internal read backtrack support. We implement the internal methods
 *	for mark, unmark and reset to note the current file position. This is
 *	used by the lexer to unwind the read queue if we overread the number
 *	of characters during parsing
 *
 *	In essence, as we execute the DFA while we read characters, when we
 *	find an end state, we mark the stream. Then we continue to read until
 *	we reach an error--at which point we rewind back to the mark location.
 */

/*	OCLexTest::mark
 *
 *		Mark: note that we should cache characters being read so we can rewind
 *	to this location in the future
 */

void OCLexTest::mark(void)
{
	/*
	 *	Store the current file location and enable marking. This has the side
	 *	effect of flushing any previous mark buffer
	 */

	markLine = curLine;
	markColumn = curColumn;
	textMarkSize = textSize;

	isMarked = true;
	markSize = 0;
}

/*	OCLexTest::reset
 *
 *		Reset: reset the buffer positions
 */

void OCLexTest::reset(void)
{
	if (!isMarked) return;	// not marked, nothing to do.

	/*
	 *	Reset to the marked position. We maintain two mutable data objects,
	 *	one which stores the data we're reading from (if any), and one which
	 *	stores the marked data.
	 *
	 *	Reset does two things: it prepends the read buffer with the data we
	 *	stored during the mark phase, and we clear the mark flag.
	 */

	if (markSize + readSize - readPos > readAlloc) {
		/*
		 *	Resize to fit
		 */

		int32_t toFit = markSize + readSize - readPos;
		toFit = (toFit + 255) & ~255;	// align to 256 byte boundary
		if (toFit < 0) toFit = 256;

		unsigned char *ptr = (unsigned char *)realloc(readBuffer, toFit);
		if (ptr == NULL) {
			throw std::bad_alloc();
		}

		readBuffer = ptr;
		readAlloc = toFit;
	}

	/*
	 *	Move the contents of the read buffer to a location above where the
	 *	mark queue will go
	 */

	if (readPos < readSize) {
		memmove(markSize + readBuffer, readPos + readBuffer, readSize - readPos);
	}

	/*
	 *	Move the marked data
	 */

	if (markSize > 0) {
		memmove(readBuffer, markBuffer, markSize);
	}

	/*
	 *	Update the read buffer settings
	 */

	readSize = markSize + readSize - readPos;
	readPos = 0;

	/*
	 *	Clear the mark
	 */

	isMarked = false;
	markSize = 0;

	/*
	 *	Update the file position
	 */

	curLine = markLine;
	curColumn = markColumn;
	textSize = textMarkSize;
}

/*
 *	Read input stream.
 */

int OCLexTest::input(void)
{
	int ch;

	/*
	 *	Low level: read, if from marked buffer
	 */

	if (readPos < readSize) {
		ch = readBuffer[readPos++];
	} else {
		ch = file->readByte();

		if (ch == -1) return -1;		// At EOF; immediate return.
	}

	/*
	 *	Update file position
	 */

	if (ch == '\n') {
		curColumn = 0;
		++curLine;
	} else {
		++curColumn;
	}

	/*
	 *	Handle mark
	 */

	if (isMarked) {
		if (markSize >= markAlloc) {
			int32_t toFit = (markAlloc + 256) & ~255;
			if (toFit < 256) toFit = 256;
			unsigned char *ptr = (unsigned char *)realloc(markBuffer, toFit);
			if (ptr == NULL) {
				throw std::bad_alloc();
			}

			markBuffer = ptr;
			markAlloc = toFit;
		}
		markBuffer[markSize++] = (unsigned char)ch;
	}

	/*
	 *	Return read character.
	 */

	return ch;
}

/*
 *	Read ahead to determine if we're at the EOL
 */

bool OCLexTest::atEOL()
{
	int ch;

	if (readPos < readSize) {
		ch = readBuffer[readPos];
	} else {
		ch = file->peekByte();
	}

	if ((ch == -1) || (ch == '\n')) return true;
	return false;
}

bool OCLexTest::atSOL()
{
	return column == 0;
}

/*
 *	Read the state for the class/state combination. Decodes the sparce
 *	matrix that is compressed in StateMachineIA/JA/A above. If the
 *	entry is not found, returns MAXSTATES. This is the same as the lookup
 *	StateMachine[class][state] if the StateMachine sparse array was
 *	unrolled
 */

uint16_t OCLexTest::stateForClass(uint16_t charClass, uint16_t state)
{
	size_t min,max,mid;

	/* Find range */
	min = StateMachineIA[state];
	max = StateMachineIA[state+1];

	/* Binary search for value in ja */
	while (min < max) {
		mid = (min + max)/2;
		uint16_t j = StateMachineJA[mid];
		if (charClass == j) {
			return StateMachineA[mid];
		} else if (charClass < j) {
			max = mid;
		} else {
			min = mid+1;
		}
	}
	return MAXSTATES;
}

void OCLexTest::setFile(std::string &file, int32_t line)
{
	filename = file;
	curLine = line;
}

void OCLexTest::setLine(int32_t line)
{
	curLine = line;
}

/*
 *	Internal methods declared within the Lex file
 */



 

int OCLexTest::checkType()
{
	
	return IDENTIFIER;
}

void OCLexTest::skipComment()
{
	int ch;

	while (-1 != (ch = input())) {
		if (ch == '*') {
			mark();
			ch = input();
			if (ch == '/') return;
			reset();
		}
	}
}



/*
 *  For conditional states this takes an end DFA state and
 *  determines the proper end rule given the current start
 *  conditionals.
 */

uint16_t OCLexTest::conditionalAction(uint16_t state)
{
    switch (state) {
        default:
            return MAXACTIONS;
    }
}

/*	OCLexTest::lex
 *
 *		Lex interpreter. THis runs the state machine until we find something
 */

int32_t OCLexTest::lex(void)
{
	uint16_t state;
	uint16_t action = MAXACTIONS;

#ifdef OCLexTest_ValueDefined
	memset(&value,0,sizeof(value));
#endif

	/*
	 *	Run until we hit EOF or a production rule triggers a return
	 */

	for (;;) {
		/*
		 *	Start running the DFA
		 */

		state = 0;
		textSize = 0;

		line = curLine;
		column = curColumn;

		for (;;) {
			int ch = input();
			if (ch == -1) {
				/*
				 *	We've hit EOF. If there is no stored text, we assume
				 *	we're at the file EOF, so return EOF. Otherwise treat as
				 *	illegal state transition.
				 */

				if (textSize == 0) return -1;
				break;
			}

			/*
			 *	Attempt to transition to the next state
			 */

			uint16_t charClass = CharClass[ch];
			uint16_t newState = stateForClass(charClass, state);
			if (newState >= MAXSTATES) {
				/* Illegal state transition */
				break;
			}

			/*
			 *	Store the character we read, and transition to the next
			 *	state
			 */

			state = newState;

			if (textSize >= textAlloc) {
				int32_t toFit = (textAlloc + 256) & ~255;
				if (toFit < 256) toFit = 256;
				unsigned char *ptr = (unsigned char *)realloc(textBuffer, toFit);
				if (ptr == NULL) {
					throw std::bad_alloc();
				}

				textBuffer = ptr;
				textAlloc = toFit;
			}
			textBuffer[textSize++] = (char)ch;

			/*
			 *	Note the current action if we have one
			 */

			uint16_t newAction = StateActions[state];
			if (newAction > MAXACTIONS) {
				newAction = conditionalAction(newAction);
			}
			if (newAction != MAXACTIONS) {
				action = newAction;
				mark();
			}
		}

		/*
		 *	If no action is set, we simply abort after setting an internal
		 *	error state. This should never happen in a well designed lexer
		 */

		if (action == MAXACTIONS) {
			abort = "Illegal character sequence";
			return -1;
		}

		/*
		 *	Action is set, so we rewind.
		 */

		reset();
		if (textSize == 0) {
			abort = "No characters read in sequence";
			return -1;
		}

		/*
		 *	Convert text sequence into string
		 */

		text = std::string((char *)textBuffer,textSize);

		/*
		 *	Execute action
		 */

		switch (action) {
            case 0:
                skipComment(); 
                break;

            case 1:
                
                break;

            case 2:
                return ABSTRACT; 
                break;

            case 3:
                return BREAK; 
                break;

            case 4:
                return BYTE; 
                break;

            case 5:
                return CASE; 
                break;

            case 6:
                return CLASS; 
                break;

            case 7:
                return CONTINUE; 
                break;

            case 8:
                return DEFAULT; 
                break;

            case 9:
                return DELETE; 
                break;

            case 10:
                return DO; 
                break;

            case 11:
                return DOUBLE; 
                break;

            case 12:
                return ELSE; 
                break;

            case 13:
                return FLOAT; 
                break;

            case 14:
                return FOR; 
                break;

            case 15:
                return GOTO; 
                break;

            case 16:
                return GOSUB; 
                break;

            case 17:
                return IF; 
                break;

            case 18:
                return INT; 
                break;

            case 19:
                return NEW; 
                break;

            case 20:
                return LONG; 
                break;

            case 21:
                return RETURN; 
                break;

            case 22:
                return SHORT; 
                break;

            case 23:
                return SIZEOF; 
                break;

            case 24:
                return STRUCT; 
                break;

            case 25:
                return SWITCH; 
                break;

            case 26:
                return UNSIGNED; 
                break;

            case 27:
                return VOID; 
                break;

            case 28:
                return WHILE; 
                break;

            case 29:
                return checkType(); 
                break;

            case 30:
                return INTEGER_CONSTANT; 
                break;

            case 31:
                return INTEGER_CONSTANT; 
                break;

            case 32:
                return INTEGER_CONSTANT; 
                break;

            case 33:
                return CHAR_LITERAL; 
                break;

            case 34:
                return REAL_CONSTANT; 
                break;

            case 35:
                return REAL_CONSTANT; 
                break;

            case 36:
                return REAL_CONSTANT; 
                break;

            case 37:
                return STRING_LITERAL; 
                break;

            case 38:
                return RIGHT_ASSIGN; 
                break;

            case 39:
                return LEFT_ASSIGN; 
                break;

            case 40:
                return ADD_ASSIGN; 
                break;

            case 41:
                return SUB_ASSIGN; 
                break;

            case 42:
                return MUL_ASSIGN; 
                break;

            case 43:
                return DIV_ASSIGN; 
                break;

            case 44:
                return MOD_ASSIGN; 
                break;

            case 45:
                return AND_ASSIGN; 
                break;

            case 46:
                return XOR_ASSIGN; 
                break;

            case 47:
                return OR_ASSIGN; 
                break;

            case 48:
                return RIGHT_OP; 
                break;

            case 49:
                return LEFT_OP; 
                break;

            case 50:
                return INC_OP; 
                break;

            case 51:
                return DEC_OP; 
                break;

            case 52:
                return PTR_OP; 
                break;

            case 53:
                return AND_OP; 
                break;

            case 54:
                return OR_OP; 
                break;

            case 55:
                return LE_OP; 
                break;

            case 56:
                return GE_OP; 
                break;

            case 57:
                return EQ_OP; 
                break;

            case 58:
                return NE_OP; 
                break;

            case 59:
                
                break;

            case 60:
                return text[0]; 
                break;

			default:
				break;
		}
	}
}

