/*	ExampleC.cpp
 *
 *		This file was automatically generated by OCYacc, part of the OCTools
 *	suite available at:
 *
 *		https://github.com/w3woody/OCTools
 */

#include "ExampleC.h"
#include "Example2.h"
/*
 *	Note: this is a baseline implementation for an LR parser as described in
 *	Aho, Sethi, Ullman: "Compilers: Principles, Techniques and Tools", (the
 *	Dragon Book), pages 216-220. Unlike the example there we don't bother 
 *	storing the tokens on the token stack. We also take some liberties to
 *	compress our tables, and do a few optimizations similar to Bison.
 *
 *	Table compression scheme comes from
 *
 *	https://en.wikipedia.org/wiki/Sparse_matrix
 *
 *	A discussion of the Bison internals comes from
 *
 *	https://www.cs.uic.edu/~spopuri/cparser.html
 */

/************************************************************************/
/*                                                                      */
/*  State Tables and Constants                                          */
/*                                                                      */
/************************************************************************/

// Various constants
#define K_ACCEPTSTATE       3            // Final accept state
#define K_EOFTOKEN          0x110000     // EOF token ID
#define K_ERRORTOKEN        0x110001     // Error token ID
#define K_FIRSTTOKEN        0x110002     // Error token ID
#define K_MAXSYMBOL         0x110005     // Max ID for all symbols
#define K_STARTSTATE		0            // Start state is always 0

/*  TokenArray
 *
 *      Array of non-Unicode token values for error reporting
 */

static const char *TokenArray[] = {
    "NUMBER"
};

/*  RuleLength
 *
 *      The number of tokens a reduce action removes from the stack
 */

static const uint8_t RuleLength[2] = {
     1,  3
};

/*  RuleProduction
 *
 *      The prodution ID we reduce to
 */

static const uint32_t RuleProduction[2] = {
    0x110003, 0x110004
};

/*
 *  The following tables are compressed using CSR format.
 *  See https://en.wikipedia.org/wiki/Sparse_matrix
 */

/*  ActionI, J, A
 *
 *      Compressed action index table.
 */

static const uint32_t ActionI[7] = {
         0,      1,      2,      3,      4,      5,      6
};

static const uint32_t ActionJ[6] = {
    0x110002,      '+', 0x110000, 0x110000, 0x110002, 0x110000
};

// Note: < 0 -> reduce (rule = -a-1), >= 0 -> shift (state).
static const int16_t ActionA[6] = {
         1,      4,      3,     -1,      5,     -2
};

/*  GotoI, J, A
 *
 *      Compressed goto table.
 */

static const uint32_t GotoI[7] = {
         0,      1,      1,      1,      1,      1,      1
};

static const uint32_t GotoJ[1] = {
    0x110004
};

static const int16_t GotoA[1] = {
         2
};

/************************************************************************/
/*                                                                      */
/*  Parser Code															*/
/*                                                                      */
/************************************************************************/

/*
 *	Construction
 */

ExampleC::ExampleC(Example2 *l)
{
	lex = l;

    %init

}

/*
 *	Destruction
 */

ExampleC::~ExampleC()
{

    %finish

}


CODE


/*
 *	Process production rule. This processes the production rule and creates
 *	a new stack state with the rule reduction.
 */

ExampleCStack ExampleC::processReduction(int16_t rule)
{
	// Get production len, for translating $1...$N into something useful
	int32_t pos = (int32_t)stack.size() - RuleLength[rule];

	// Set up initial state.
	ExampleCStack s;

	// File position of reduced rule is first token of the symbols reduced
	ExampleCStack &fs = stack[pos];
	s.filename = fs.filename;
	s.line = fs.line;
	s.column = fs.column;

	// Now process production.
	//
	// Note that $$ translated into (s.value), and
	// $n translates into ((<type> *)(stack[pos+(n-1)])), where <type>
	// is the declared type of the token or production rule.

	try {
		switch (rule) {

        // Production rules
            // (110003) $accept : add $end
            // (110004) add : NUMBER '+' NUMBER 
            case 1:
                {
                s.value.value = (stack[pos].value.value) + (stack[pos + 2].value.value); 
        
                }
                break;


			default:
				break;
		}
	}
	catch (...) {
	}
	return s;
}
/*
 *	Look up the action value for the state and token values provided. This
 *	parses through the ActionI, ActionJ and ActionA lists to find the correct
 *	entry. This returns NSIntegerMax if a value was not found, and this is an
 *	error entry.
 */

int32_t ExampleC::actionForState(int32_t state, int32_t token)
{
	size_t min,max,mid;

	/* Deal with EOF case */
	if (token == -1) token = K_EOFTOKEN;

	/* Find range */
	min = ActionI[state];
	max = ActionI[state+1];

	/* Binary search for value in ja */
	while (min < max) {
		mid = (min + max)/2;
		uint32_t j = ActionJ[mid];
		if (token == j) {
			return ActionA[mid];
		} else if (token < j) {
			max = mid;
		} else {
			min = mid+1;
		}
	}
	return INT_MAX;
}

/*
 *	Look up the goto value for the state and token (production rule) provided.
 *	Operates the same as actionForState, except we look in the goto table.
 *	In teory I guess we could combine these two tables (as productions and
 *	tokens do not overlap).
 */

int32_t ExampleC::gotoForState(int32_t state, int32_t token)
{
	size_t min,max,mid;

	/* Find range */
	min = GotoI[state];
	max = GotoI[state+1];

	/* Binary search for value in ja */
	while (min < max) {
		mid = (min + max)/2;
		int32_t j = GotoJ[mid];
		if (token == j) {
			return GotoA[mid];
		} else if (token < j) {
			max = mid;
		} else {
			min = mid+1;
		}
	}
	return INT_MAX;
}

/*	ExampleC::error
 *
 *		Override this if you want error reporting
 */

void ExampleC::error(int32_t line, int32_t col, std::string fname, int32_t errCode, std::map<std::string,std::string> &map)
{
	// By default this does nothing.
}

/*
 *	Errors. This formats and prints the specified error
 */

void ExampleC::errorWithCode(int32_t code, std::map<std::string,std::string> &data)
{
	if (errorCount > 0) return;		// skip until synced on 3 shifts

	// Call delegate with current token position
	// Token position is the topmost symbol
	ExampleCStack &top = stack.back();

	error(top.line,top.column,top.filename,code,data);

	// And now skip the next 3 token shifts so we don't spew garbage.
	if (0 == (code & ERRORMASK_WARNING)) {
		success = false;
		errorCount = 3;
	}
}

void ExampleC::errorWithCode(int32_t code)
{
	std::map<std::string,std::string> empty;
	errorWithCode(code, empty);
}

void ExampleC::errorOK()
{
	errorCount = 0;
}

std::string ExampleC::tokenToString(uint32_t token)
{
	if (token >= K_FIRSTTOKEN) {
		return TokenArray[token - K_FIRSTTOKEN];
	} else {
		/*
		 *	Convert token to UTF-8
		 */

		std::string ret;
		if (token < 0x80) {
			ret += (char)token;
		} else if (token < 0x800) {
			ret += (char)(0xC0 | (0x1F & (token >> 6)));
			ret += (char)(0x80 | (0x3F & (token)));
		} else if (token < 0x10000) {
			ret += (char)(0xE0 | (0x0F & (token >> 12)));
			ret += (char)(0x80 | (0x3F & (token >> 6)));
			ret += (char)(0x80 | (0x3F & (token)));
		} else {
			ret += (char)(0xF0 | (0x07 & (token >> 18)));
			ret += (char)(0x80 | (0x3F & (token >> 12)));
			ret += (char)(0x80 | (0x3F & (token >> 6)));
			ret += (char)(0x80 | (0x3F & (token)));
		}
		return ret;
	}
}

bool ExampleC::reduceByAction(int16_t action)
{
	// Determine the new state we're transitioning to.
	uint32_t production = RuleProduction[action];
	uint8_t length = RuleLength[action];

	// We pull the state we'd have after popping the stack.
	uint16_t statep = stack[stack.size() - length - 1].state;

	// Now calculate the state we should transition to
	int32_t newState = gotoForState(statep,production);
	if (newState == INT_MAX) return false;

	// Process production rule, which generates the new state
	ExampleCStack state = processReduction(action);

	// Update state
	state.state = newState;

	// Pop the stack
	stack.erase(stack.begin() + (stack.size() - length),stack.end());

	// Push new state
	stack.push_back(state);

	// Done.
	return true;
}

/*
 *	Parser engine. Returns NO if there was an error during processing. Note
 *	that as we uncover errors we call our delegate for error handling. This
 *	implements the algorithm described in the Dragon Book, Algorithm 4.7.
 */

bool ExampleC::parse()
{
	int32_t a;				// lex symbol

	/*
	 *	Step 1: reset and push the empty state.
	 */

	success = true;
	stack.clear();

	ExampleCStack initStack;
	initStack.state = K_STARTSTATE;
	initStack.filename = lex->filename;
	initStack.line = lex->line;
	initStack.column = lex->column;
	stack.push_back(initStack);

	/*
	 *	Now repeat forever:
	 */

	a = lex->lex();

	for (;;) {
		ExampleCStack &s = stack.back();

		/*
		 *	Determine if this is the end state. If so, then we immediately
		 *	quit. We assume the user has set the production rule at the
		 *	top, so we can simply drop the stack
		 */

		if (s.state == K_ACCEPTSTATE) {
			stack.clear();
			return success;
		}

		/*
		 *	Now determine the action and shift, reduce or handle error as
		 *	appropriate
		 */

		int32_t action = actionForState(s.state, a);

		if (action == INT_MAX) {
			/*
			 *	Handle error. First, note we have an error, and note the
			 *	symbol on which our error took place.
			 */

			success = false;		// regardless, we will always fail.

			/*
			 *	First, scan backwards from the current state, looking for one
			 *	which has an 'error' symbol.
			 */

			size_t ix = stack.size();
			while (ix > 0) {
				ExampleCStack &si = stack[--ix];
				action = actionForState(si.state, K_ERRORTOKEN);
				if ((action >= 0) && (action != INT_MAX)) {
					/*
					 *	Encountered error state. If the user has defined an
					 *	error token, we ultimately will want to (a) unwind
					 *	the stack until we find a state which handles the
					 *	error transition. We then .
					 */

					if (ix+1 < stack.size()) {
						stack.erase(stack.begin() + (ix + 1),stack.end());
					}

					/*
					 *	At this point we perform a shift to our new error
					 *	state.
					 */

					ExampleCStack stmp;
					stmp.state = action;
					stmp.value = lex->value;
					stmp.filename = lex->filename;
					stmp.line = lex->line;
					stmp.column = lex->column;
					stack.push_back(stmp);

					/*
					 *	Second, we start pulling symbols until we find a symbol
					 *	that shifts, or until we hit the end of file symbol.
					 *	This becomes our current token for parsing
					 */

					for (;;) {
						a = lex->lex();
						action = actionForState(s.state, a);
						if ((action >= 0) && (action != INT_MAX)) {
							/*
							 *	Valid shift. This becomes our current token,
							 *	and we resume processing.
							 */

							continue;

						} else if (action == K_EOFTOKEN) {
							/*
							 *	We ran out of tokens. At this point all
							 *	we can do is print an error and force quit.
							 */

							errorWithCode(ERROR_SYNTAX);
							stack.clear();

							return false;
						}
					}
				}
			}

			/*
			 *	If we reach this point, there is no error we can recover to.
			 *	So figure this out on our own.
			 *
			 *	First, we see if the state we're in has a limited number of
			 *	choices. For example, in C, the 'for' keyword will always be
			 *	followed by a '(' token, so we can offer to automatically
			 *	insert that token.
			 */

			int32_t actionMin = ActionI[s.state];
			int32_t actionMax = ActionI[s.state + 1];
			int32_t actionVal = actionMin;
			int16_t actionState = -1;
			for (int32_t ix = actionMin; ix < actionMax; ++ix) {
				int16_t act = ActionA[ix];
				if (actionState == -1) {
					if (act >= 0) {
						actionState = act;
						actionVal = ix;
					}
				} else {
					actionState = -1;
					break;
				}
			}

			if (actionState != -1) {
				/*
				 *	We can accomplish this transition with one token. Print
				 *	an error, and do a shift on the state with an empty value.
				 */

				std::string tokenStr = tokenToString(ActionJ[actionVal]);
				std::map<std::string,std::string> map;
				map["token"] = tokenStr;
				errorWithCode(ERROR_MISSINGTOKEN, map);

				/*
				 *	Perform a shift but do not pull a new token
				 */

				ExampleCStack &top = stack.back();

				ExampleCStack stmp;
				stmp.state = actionState;
				stmp.value = lex->value;
				stmp.filename = top.filename;
				stmp.line = top.line;
				stmp.column = top.column;

				stack.push_back(stmp);
				continue;
			}

			/*
			 *	See if we have a limited choice in reductions. If this can
			 *	only reduce to a single state, try that reduction.
			 */

			actionState = 0;
			for (int32_t ix = actionMin; ix < actionMax; ++ix) {
				int16_t act = ActionA[ix];
				if (actionState == 0) {
					if ((act < 0) && (actionState != act)) {
						actionState = act;
					}
				} else {
					actionState = 0;
					break;
				}
			}

			if (actionState != 0) {
				/*
				 *	We have one possible reduction. Try that. Note that this
				 *	will trigger a syntax error since we're reducing down
				 *	without the follow token. My hope is that the state we
				 *	transition to has a limited set of next tokens to follow.
				 */

				reduceByAction(action);
				continue;
			}

			/*
			 *	If we have a limited number of tokens which can follow,
			 *	print a list of them. Then shift by the first one we
			 *	find. We don't do this if the number of shifts is greater
			 *	than five.
			 */

			if (actionMax - actionMin <= 5) {
				std::string tlist;
				for (int32_t ix = actionMin; ix < actionMax; ++ix) {
					if (ix > actionMin) tlist += ", ";
					tlist += tokenToString(ActionJ[ix]);
				}

				std::map<std::string,std::string> map;
				map["token"] = tlist;
				errorWithCode(ERROR_MISSINGTOKENS, map);

				/*
				 *	Now we artificially insert the first of the list of
				 *	tokens as our action and continue.
				 */

				a = ActionJ[actionMin];
				continue;
			}

			/*
			 *	If we get here, things just went too far south. So we
			 *	skip a token, print syntax error and move on
			 */

			errorWithCode(ERROR_SYNTAX);
			a = lex->lex();
			if (a == -1) return false;

		} else if (action >= 0) {
			/*
			 *	Shift operation.
			 */

			// Shift
			ExampleCStack stmp;
			stmp.state = action;
			stmp.value = lex->value;
			stmp.filename = lex->filename;
			stmp.line = lex->line;
			stmp.column = lex->column;

			stack.push_back(stmp);

			// Advance to next token.
			a = lex->lex();

			// Decrement our error count. If this is non-zero we're in an
			// error state, and we don't pass spurrous errors upwards
			if (errorCount) --errorCount;

		} else {
			/*
			 *	Reduce action. (Reduce is < 0, and the production to reduce
			 *	by is given below
			 */

			action = -action-1;

			if (!reduceByAction(action)) {
				// If there is an error, this handles the error.
				// (This should not happen in practice).
				errorWithCode(ERROR_SYNTAX);

				// Advance to next token.
				a = lex->lex();
			}
		}
	}
}
